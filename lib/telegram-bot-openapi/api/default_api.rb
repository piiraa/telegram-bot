=begin
#telegram-bot-api

#Unofficial telegram-bot-api OpenAPI spec. Generated from the Bot API docs at https://core.telegram.org/bots/api

The version of the OpenAPI document: Bot API 7.2

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module TelegramBotOpenapi
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # addStickerToSet
    # Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success.
    # @param user_id [Integer] 
    # @param name [String] 
    # @param sticker [InputSticker] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def add_sticker_to_set(user_id, name, sticker, opts = {})
      data, _status_code, _headers = add_sticker_to_set_with_http_info(user_id, name, sticker, opts)
      data
    end

    # addStickerToSet
    # Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success.
    # @param user_id [Integer] 
    # @param name [String] 
    # @param sticker [InputSticker] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def add_sticker_to_set_with_http_info(user_id, name, sticker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_sticker_to_set ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.add_sticker_to_set"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.add_sticker_to_set"
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.add_sticker_to_set"
      end
      # resource path
      local_var_path = '/addStickerToSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'name'] = name
      query_params[:'sticker'] = sticker

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.add_sticker_to_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_sticker_to_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # answerCallbackQuery
    # Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.
    # @param callback_query_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :text 
    # @option opts [Boolean] :show_alert 
    # @option opts [String] :url 
    # @option opts [Integer] :cache_time 
    # @return [SetWebhook200Response]
    def answer_callback_query(callback_query_id, opts = {})
      data, _status_code, _headers = answer_callback_query_with_http_info(callback_query_id, opts)
      data
    end

    # answerCallbackQuery
    # Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.
    # @param callback_query_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :text 
    # @option opts [Boolean] :show_alert 
    # @option opts [String] :url 
    # @option opts [Integer] :cache_time 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def answer_callback_query_with_http_info(callback_query_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.answer_callback_query ...'
      end
      # verify the required parameter 'callback_query_id' is set
      if @api_client.config.client_side_validation && callback_query_id.nil?
        fail ArgumentError, "Missing the required parameter 'callback_query_id' when calling DefaultApi.answer_callback_query"
      end
      # resource path
      local_var_path = '/answerCallbackQuery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callback_query_id'] = callback_query_id
      query_params[:'text'] = opts[:'text'] if !opts[:'text'].nil?
      query_params[:'show_alert'] = opts[:'show_alert'] if !opts[:'show_alert'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?
      query_params[:'cache_time'] = opts[:'cache_time'] if !opts[:'cache_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.answer_callback_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#answer_callback_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # answerInlineQuery
    # Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed.
    # @param inline_query_id [String] 
    # @param results [Array<Object>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :cache_time 
    # @option opts [Boolean] :is_personal 
    # @option opts [String] :next_offset 
    # @option opts [InlineQueryResultsButton] :button 
    # @return [SetWebhook200Response]
    def answer_inline_query(inline_query_id, results, opts = {})
      data, _status_code, _headers = answer_inline_query_with_http_info(inline_query_id, results, opts)
      data
    end

    # answerInlineQuery
    # Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed.
    # @param inline_query_id [String] 
    # @param results [Array<Object>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :cache_time 
    # @option opts [Boolean] :is_personal 
    # @option opts [String] :next_offset 
    # @option opts [InlineQueryResultsButton] :button 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def answer_inline_query_with_http_info(inline_query_id, results, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.answer_inline_query ...'
      end
      # verify the required parameter 'inline_query_id' is set
      if @api_client.config.client_side_validation && inline_query_id.nil?
        fail ArgumentError, "Missing the required parameter 'inline_query_id' when calling DefaultApi.answer_inline_query"
      end
      # verify the required parameter 'results' is set
      if @api_client.config.client_side_validation && results.nil?
        fail ArgumentError, "Missing the required parameter 'results' when calling DefaultApi.answer_inline_query"
      end
      # resource path
      local_var_path = '/answerInlineQuery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inline_query_id'] = inline_query_id
      query_params[:'results'] = @api_client.build_collection_param(results, :multi)
      query_params[:'cache_time'] = opts[:'cache_time'] if !opts[:'cache_time'].nil?
      query_params[:'is_personal'] = opts[:'is_personal'] if !opts[:'is_personal'].nil?
      query_params[:'next_offset'] = opts[:'next_offset'] if !opts[:'next_offset'].nil?
      query_params[:'button'] = opts[:'button'] if !opts[:'button'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.answer_inline_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#answer_inline_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # answerPreCheckoutQuery
    # Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    # @param pre_checkout_query_id [String] 
    # @param ok [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :error_message 
    # @return [SetWebhook200Response]
    def answer_pre_checkout_query(pre_checkout_query_id, ok, opts = {})
      data, _status_code, _headers = answer_pre_checkout_query_with_http_info(pre_checkout_query_id, ok, opts)
      data
    end

    # answerPreCheckoutQuery
    # Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    # @param pre_checkout_query_id [String] 
    # @param ok [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :error_message 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def answer_pre_checkout_query_with_http_info(pre_checkout_query_id, ok, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.answer_pre_checkout_query ...'
      end
      # verify the required parameter 'pre_checkout_query_id' is set
      if @api_client.config.client_side_validation && pre_checkout_query_id.nil?
        fail ArgumentError, "Missing the required parameter 'pre_checkout_query_id' when calling DefaultApi.answer_pre_checkout_query"
      end
      # verify the required parameter 'ok' is set
      if @api_client.config.client_side_validation && ok.nil?
        fail ArgumentError, "Missing the required parameter 'ok' when calling DefaultApi.answer_pre_checkout_query"
      end
      # resource path
      local_var_path = '/answerPreCheckoutQuery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pre_checkout_query_id'] = pre_checkout_query_id
      query_params[:'ok'] = ok
      query_params[:'error_message'] = opts[:'error_message'] if !opts[:'error_message'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.answer_pre_checkout_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#answer_pre_checkout_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # answerShippingQuery
    # If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    # @param shipping_query_id [String] 
    # @param ok [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ShippingOption>] :shipping_options 
    # @option opts [String] :error_message 
    # @return [SetWebhook200Response]
    def answer_shipping_query(shipping_query_id, ok, opts = {})
      data, _status_code, _headers = answer_shipping_query_with_http_info(shipping_query_id, ok, opts)
      data
    end

    # answerShippingQuery
    # If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    # @param shipping_query_id [String] 
    # @param ok [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ShippingOption>] :shipping_options 
    # @option opts [String] :error_message 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def answer_shipping_query_with_http_info(shipping_query_id, ok, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.answer_shipping_query ...'
      end
      # verify the required parameter 'shipping_query_id' is set
      if @api_client.config.client_side_validation && shipping_query_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipping_query_id' when calling DefaultApi.answer_shipping_query"
      end
      # verify the required parameter 'ok' is set
      if @api_client.config.client_side_validation && ok.nil?
        fail ArgumentError, "Missing the required parameter 'ok' when calling DefaultApi.answer_shipping_query"
      end
      # resource path
      local_var_path = '/answerShippingQuery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'shipping_query_id'] = shipping_query_id
      query_params[:'ok'] = ok
      query_params[:'shipping_options'] = @api_client.build_collection_param(opts[:'shipping_options'], :multi) if !opts[:'shipping_options'].nil?
      query_params[:'error_message'] = opts[:'error_message'] if !opts[:'error_message'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.answer_shipping_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#answer_shipping_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # answerWebAppQuery
    # Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.
    # @param web_app_query_id [String] 
    # @param result [Object] 
    # @param [Hash] opts the optional parameters
    # @return [AnswerWebAppQuery200Response]
    def answer_web_app_query(web_app_query_id, result, opts = {})
      data, _status_code, _headers = answer_web_app_query_with_http_info(web_app_query_id, result, opts)
      data
    end

    # answerWebAppQuery
    # Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.
    # @param web_app_query_id [String] 
    # @param result [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnswerWebAppQuery200Response, Integer, Hash)>] AnswerWebAppQuery200Response data, response status code and response headers
    def answer_web_app_query_with_http_info(web_app_query_id, result, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.answer_web_app_query ...'
      end
      # verify the required parameter 'web_app_query_id' is set
      if @api_client.config.client_side_validation && web_app_query_id.nil?
        fail ArgumentError, "Missing the required parameter 'web_app_query_id' when calling DefaultApi.answer_web_app_query"
      end
      # verify the required parameter 'result' is set
      if @api_client.config.client_side_validation && result.nil?
        fail ArgumentError, "Missing the required parameter 'result' when calling DefaultApi.answer_web_app_query"
      end
      # resource path
      local_var_path = '/answerWebAppQuery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'web_app_query_id'] = web_app_query_id
      query_params[:'result'] = result

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnswerWebAppQuery200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.answer_web_app_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#answer_web_app_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # approveChatJoinRequest
    # Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def approve_chat_join_request(chat_id, user_id, opts = {})
      data, _status_code, _headers = approve_chat_join_request_with_http_info(chat_id, user_id, opts)
      data
    end

    # approveChatJoinRequest
    # Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def approve_chat_join_request_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.approve_chat_join_request ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.approve_chat_join_request"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.approve_chat_join_request"
      end
      # resource path
      local_var_path = '/approveChatJoinRequest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.approve_chat_join_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#approve_chat_join_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # banChatMember
    # Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :until_date 
    # @option opts [Boolean] :revoke_messages 
    # @return [SetWebhook200Response]
    def ban_chat_member(chat_id, user_id, opts = {})
      data, _status_code, _headers = ban_chat_member_with_http_info(chat_id, user_id, opts)
      data
    end

    # banChatMember
    # Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :until_date 
    # @option opts [Boolean] :revoke_messages 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def ban_chat_member_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ban_chat_member ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.ban_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.ban_chat_member"
      end
      # resource path
      local_var_path = '/banChatMember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id
      query_params[:'until_date'] = opts[:'until_date'] if !opts[:'until_date'].nil?
      query_params[:'revoke_messages'] = opts[:'revoke_messages'] if !opts[:'revoke_messages'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.ban_chat_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ban_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # banChatSenderChat
    # Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sender_chat_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def ban_chat_sender_chat(chat_id, sender_chat_id, opts = {})
      data, _status_code, _headers = ban_chat_sender_chat_with_http_info(chat_id, sender_chat_id, opts)
      data
    end

    # banChatSenderChat
    # Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won&#39;t be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sender_chat_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def ban_chat_sender_chat_with_http_info(chat_id, sender_chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ban_chat_sender_chat ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.ban_chat_sender_chat"
      end
      # verify the required parameter 'sender_chat_id' is set
      if @api_client.config.client_side_validation && sender_chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_chat_id' when calling DefaultApi.ban_chat_sender_chat"
      end
      # resource path
      local_var_path = '/banChatSenderChat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'sender_chat_id'] = sender_chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.ban_chat_sender_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ban_chat_sender_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # close
    # Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def close(opts = {})
      data, _status_code, _headers = close_with_http_info(opts)
      data
    end

    # close
    # Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn&#39;t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def close_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.close ...'
      end
      # resource path
      local_var_path = '/close'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.close",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#close\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # closeForumTopic
    # Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def close_forum_topic(chat_id, message_thread_id, opts = {})
      data, _status_code, _headers = close_forum_topic_with_http_info(chat_id, message_thread_id, opts)
      data
    end

    # closeForumTopic
    # Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def close_forum_topic_with_http_info(chat_id, message_thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.close_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.close_forum_topic"
      end
      # verify the required parameter 'message_thread_id' is set
      if @api_client.config.client_side_validation && message_thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_id' when calling DefaultApi.close_forum_topic"
      end
      # resource path
      local_var_path = '/closeForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_thread_id'] = message_thread_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.close_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#close_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # closeGeneralForumTopic
    # Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def close_general_forum_topic(chat_id, opts = {})
      data, _status_code, _headers = close_general_forum_topic_with_http_info(chat_id, opts)
      data
    end

    # closeGeneralForumTopic
    # Use this method to close an open &#39;General&#39; topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def close_general_forum_topic_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.close_general_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.close_general_forum_topic"
      end
      # resource path
      local_var_path = '/closeGeneralForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.close_general_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#close_general_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # copyMessage
    # Use this method to copy messages of any kind. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [CopyMessage200Response]
    def copy_message(chat_id, from_chat_id, message_id, opts = {})
      data, _status_code, _headers = copy_message_with_http_info(chat_id, from_chat_id, message_id, opts)
      data
    end

    # copyMessage
    # Use this method to copy messages of any kind. Service messages, giveaway messages, giveaway winners messages, and invoice messages can&#39;t be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn&#39;t have a link to the original message. Returns the MessageId of the sent message on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(CopyMessage200Response, Integer, Hash)>] CopyMessage200Response data, response status code and response headers
    def copy_message_with_http_info(chat_id, from_chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.copy_message ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.copy_message"
      end
      # verify the required parameter 'from_chat_id' is set
      if @api_client.config.client_side_validation && from_chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'from_chat_id' when calling DefaultApi.copy_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.copy_message"
      end
      # resource path
      local_var_path = '/copyMessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'from_chat_id'] = from_chat_id
      query_params[:'message_id'] = message_id
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CopyMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.copy_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#copy_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # copyMessages
    # Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages. On success, an array of MessageId of the sent messages is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_ids [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [Boolean] :remove_caption 
    # @return [ForwardMessages200Response]
    def copy_messages(chat_id, from_chat_id, message_ids, opts = {})
      data, _status_code, _headers = copy_messages_with_http_info(chat_id, from_chat_id, message_ids, opts)
      data
    end

    # copyMessages
    # Use this method to copy messages of any kind. If some of the specified messages can&#39;t be found or copied, they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages can&#39;t be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don&#39;t have a link to the original message. Album grouping is kept for copied messages. On success, an array of MessageId of the sent messages is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_ids [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [Boolean] :remove_caption 
    # @return [Array<(ForwardMessages200Response, Integer, Hash)>] ForwardMessages200Response data, response status code and response headers
    def copy_messages_with_http_info(chat_id, from_chat_id, message_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.copy_messages ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.copy_messages"
      end
      # verify the required parameter 'from_chat_id' is set
      if @api_client.config.client_side_validation && from_chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'from_chat_id' when calling DefaultApi.copy_messages"
      end
      # verify the required parameter 'message_ids' is set
      if @api_client.config.client_side_validation && message_ids.nil?
        fail ArgumentError, "Missing the required parameter 'message_ids' when calling DefaultApi.copy_messages"
      end
      # resource path
      local_var_path = '/copyMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'from_chat_id'] = from_chat_id
      query_params[:'message_ids'] = @api_client.build_collection_param(message_ids, :multi)
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'remove_caption'] = opts[:'remove_caption'] if !opts[:'remove_caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ForwardMessages200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.copy_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#copy_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createChatInviteLink
    # Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :expire_date 
    # @option opts [Integer] :member_limit 
    # @option opts [Boolean] :creates_join_request 
    # @return [CreateChatInviteLink200Response]
    def create_chat_invite_link(chat_id, opts = {})
      data, _status_code, _headers = create_chat_invite_link_with_http_info(chat_id, opts)
      data
    end

    # createChatInviteLink
    # Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :expire_date 
    # @option opts [Integer] :member_limit 
    # @option opts [Boolean] :creates_join_request 
    # @return [Array<(CreateChatInviteLink200Response, Integer, Hash)>] CreateChatInviteLink200Response data, response status code and response headers
    def create_chat_invite_link_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_chat_invite_link ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.create_chat_invite_link"
      end
      # resource path
      local_var_path = '/createChatInviteLink'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'expire_date'] = opts[:'expire_date'] if !opts[:'expire_date'].nil?
      query_params[:'member_limit'] = opts[:'member_limit'] if !opts[:'member_limit'].nil?
      query_params[:'creates_join_request'] = opts[:'creates_join_request'] if !opts[:'creates_join_request'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateChatInviteLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_chat_invite_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_chat_invite_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createForumTopic
    # Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :icon_color 
    # @option opts [String] :icon_custom_emoji_id 
    # @return [CreateForumTopic200Response]
    def create_forum_topic(chat_id, name, opts = {})
      data, _status_code, _headers = create_forum_topic_with_http_info(chat_id, name, opts)
      data
    end

    # createForumTopic
    # Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :icon_color 
    # @option opts [String] :icon_custom_emoji_id 
    # @return [Array<(CreateForumTopic200Response, Integer, Hash)>] CreateForumTopic200Response data, response status code and response headers
    def create_forum_topic_with_http_info(chat_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.create_forum_topic"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.create_forum_topic"
      end
      # resource path
      local_var_path = '/createForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'name'] = name
      query_params[:'icon_color'] = opts[:'icon_color'] if !opts[:'icon_color'].nil?
      query_params[:'icon_custom_emoji_id'] = opts[:'icon_custom_emoji_id'] if !opts[:'icon_custom_emoji_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateForumTopic200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createInvoiceLink
    # Use this method to create a link for an invoice. Returns the created invoice link as String on success.
    # @param title [String] 
    # @param description [String] 
    # @param payload [String] 
    # @param provider_token [String] 
    # @param currency [String] 
    # @param prices [Array<LabeledPrice>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_tip_amount 
    # @option opts [Array<Integer>] :suggested_tip_amounts 
    # @option opts [String] :provider_data 
    # @option opts [String] :photo_url 
    # @option opts [Integer] :photo_size 
    # @option opts [Integer] :photo_width 
    # @option opts [Integer] :photo_height 
    # @option opts [Boolean] :need_name 
    # @option opts [Boolean] :need_phone_number 
    # @option opts [Boolean] :need_email 
    # @option opts [Boolean] :need_shipping_address 
    # @option opts [Boolean] :send_phone_number_to_provider 
    # @option opts [Boolean] :send_email_to_provider 
    # @option opts [Boolean] :is_flexible 
    # @return [ExportChatInviteLink200Response]
    def create_invoice_link(title, description, payload, provider_token, currency, prices, opts = {})
      data, _status_code, _headers = create_invoice_link_with_http_info(title, description, payload, provider_token, currency, prices, opts)
      data
    end

    # createInvoiceLink
    # Use this method to create a link for an invoice. Returns the created invoice link as String on success.
    # @param title [String] 
    # @param description [String] 
    # @param payload [String] 
    # @param provider_token [String] 
    # @param currency [String] 
    # @param prices [Array<LabeledPrice>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_tip_amount 
    # @option opts [Array<Integer>] :suggested_tip_amounts 
    # @option opts [String] :provider_data 
    # @option opts [String] :photo_url 
    # @option opts [Integer] :photo_size 
    # @option opts [Integer] :photo_width 
    # @option opts [Integer] :photo_height 
    # @option opts [Boolean] :need_name 
    # @option opts [Boolean] :need_phone_number 
    # @option opts [Boolean] :need_email 
    # @option opts [Boolean] :need_shipping_address 
    # @option opts [Boolean] :send_phone_number_to_provider 
    # @option opts [Boolean] :send_email_to_provider 
    # @option opts [Boolean] :is_flexible 
    # @return [Array<(ExportChatInviteLink200Response, Integer, Hash)>] ExportChatInviteLink200Response data, response status code and response headers
    def create_invoice_link_with_http_info(title, description, payload, provider_token, currency, prices, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_invoice_link ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.create_invoice_link"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling DefaultApi.create_invoice_link"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling DefaultApi.create_invoice_link"
      end
      # verify the required parameter 'provider_token' is set
      if @api_client.config.client_side_validation && provider_token.nil?
        fail ArgumentError, "Missing the required parameter 'provider_token' when calling DefaultApi.create_invoice_link"
      end
      # verify the required parameter 'currency' is set
      if @api_client.config.client_side_validation && currency.nil?
        fail ArgumentError, "Missing the required parameter 'currency' when calling DefaultApi.create_invoice_link"
      end
      # verify the required parameter 'prices' is set
      if @api_client.config.client_side_validation && prices.nil?
        fail ArgumentError, "Missing the required parameter 'prices' when calling DefaultApi.create_invoice_link"
      end
      # resource path
      local_var_path = '/createInvoiceLink'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = title
      query_params[:'description'] = description
      query_params[:'payload'] = payload
      query_params[:'provider_token'] = provider_token
      query_params[:'currency'] = currency
      query_params[:'prices'] = @api_client.build_collection_param(prices, :multi)
      query_params[:'max_tip_amount'] = opts[:'max_tip_amount'] if !opts[:'max_tip_amount'].nil?
      query_params[:'suggested_tip_amounts'] = @api_client.build_collection_param(opts[:'suggested_tip_amounts'], :multi) if !opts[:'suggested_tip_amounts'].nil?
      query_params[:'provider_data'] = opts[:'provider_data'] if !opts[:'provider_data'].nil?
      query_params[:'photo_url'] = opts[:'photo_url'] if !opts[:'photo_url'].nil?
      query_params[:'photo_size'] = opts[:'photo_size'] if !opts[:'photo_size'].nil?
      query_params[:'photo_width'] = opts[:'photo_width'] if !opts[:'photo_width'].nil?
      query_params[:'photo_height'] = opts[:'photo_height'] if !opts[:'photo_height'].nil?
      query_params[:'need_name'] = opts[:'need_name'] if !opts[:'need_name'].nil?
      query_params[:'need_phone_number'] = opts[:'need_phone_number'] if !opts[:'need_phone_number'].nil?
      query_params[:'need_email'] = opts[:'need_email'] if !opts[:'need_email'].nil?
      query_params[:'need_shipping_address'] = opts[:'need_shipping_address'] if !opts[:'need_shipping_address'].nil?
      query_params[:'send_phone_number_to_provider'] = opts[:'send_phone_number_to_provider'] if !opts[:'send_phone_number_to_provider'].nil?
      query_params[:'send_email_to_provider'] = opts[:'send_email_to_provider'] if !opts[:'send_email_to_provider'].nil?
      query_params[:'is_flexible'] = opts[:'is_flexible'] if !opts[:'is_flexible'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExportChatInviteLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_invoice_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_invoice_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createNewStickerSet
    # Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.
    # @param user_id [Integer] 
    # @param name [String] 
    # @param title [String] 
    # @param stickers [Array<InputSticker>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sticker_type 
    # @option opts [Boolean] :needs_repainting 
    # @return [SetWebhook200Response]
    def create_new_sticker_set(user_id, name, title, stickers, opts = {})
      data, _status_code, _headers = create_new_sticker_set_with_http_info(user_id, name, title, stickers, opts)
      data
    end

    # createNewStickerSet
    # Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.
    # @param user_id [Integer] 
    # @param name [String] 
    # @param title [String] 
    # @param stickers [Array<InputSticker>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sticker_type 
    # @option opts [Boolean] :needs_repainting 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def create_new_sticker_set_with_http_info(user_id, name, title, stickers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_new_sticker_set ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.create_new_sticker_set"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.create_new_sticker_set"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.create_new_sticker_set"
      end
      # verify the required parameter 'stickers' is set
      if @api_client.config.client_side_validation && stickers.nil?
        fail ArgumentError, "Missing the required parameter 'stickers' when calling DefaultApi.create_new_sticker_set"
      end
      # resource path
      local_var_path = '/createNewStickerSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'name'] = name
      query_params[:'title'] = title
      query_params[:'stickers'] = @api_client.build_collection_param(stickers, :multi)
      query_params[:'sticker_type'] = opts[:'sticker_type'] if !opts[:'sticker_type'].nil?
      query_params[:'needs_repainting'] = opts[:'needs_repainting'] if !opts[:'needs_repainting'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_new_sticker_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_new_sticker_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # declineChatJoinRequest
    # Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def decline_chat_join_request(chat_id, user_id, opts = {})
      data, _status_code, _headers = decline_chat_join_request_with_http_info(chat_id, user_id, opts)
      data
    end

    # declineChatJoinRequest
    # Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def decline_chat_join_request_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.decline_chat_join_request ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.decline_chat_join_request"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.decline_chat_join_request"
      end
      # resource path
      local_var_path = '/declineChatJoinRequest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.decline_chat_join_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#decline_chat_join_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteChatPhoto
    # Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_chat_photo(chat_id, opts = {})
      data, _status_code, _headers = delete_chat_photo_with_http_info(chat_id, opts)
      data
    end

    # deleteChatPhoto
    # Use this method to delete a chat photo. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_chat_photo_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_chat_photo ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.delete_chat_photo"
      end
      # resource path
      local_var_path = '/deleteChatPhoto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_chat_photo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_chat_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteChatStickerSet
    # Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_chat_sticker_set(chat_id, opts = {})
      data, _status_code, _headers = delete_chat_sticker_set_with_http_info(chat_id, opts)
      data
    end

    # deleteChatStickerSet
    # Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_chat_sticker_set_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_chat_sticker_set ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.delete_chat_sticker_set"
      end
      # resource path
      local_var_path = '/deleteChatStickerSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_chat_sticker_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_chat_sticker_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteForumTopic
    # Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_forum_topic(chat_id, message_thread_id, opts = {})
      data, _status_code, _headers = delete_forum_topic_with_http_info(chat_id, message_thread_id, opts)
      data
    end

    # deleteForumTopic
    # Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_forum_topic_with_http_info(chat_id, message_thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.delete_forum_topic"
      end
      # verify the required parameter 'message_thread_id' is set
      if @api_client.config.client_side_validation && message_thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_id' when calling DefaultApi.delete_forum_topic"
      end
      # resource path
      local_var_path = '/deleteForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_thread_id'] = message_thread_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteMessage
    # Use this method to delete a message, including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Service messages about a supergroup, channel, or forum topic creation can't be deleted. - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_message(chat_id, message_id, opts = {})
      data, _status_code, _headers = delete_message_with_http_info(chat_id, message_id, opts)
      data
    end

    # deleteMessage
    # Use this method to delete a message, including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Service messages about a supergroup, channel, or forum topic creation can&#39;t be deleted. - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_message_with_http_info(chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_message ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.delete_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.delete_message"
      end
      # resource path
      local_var_path = '/deleteMessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_id'] = message_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteMessages
    # Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_ids [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_messages(chat_id, message_ids, opts = {})
      data, _status_code, _headers = delete_messages_with_http_info(chat_id, message_ids, opts)
      data
    end

    # deleteMessages
    # Use this method to delete multiple messages simultaneously. If some of the specified messages can&#39;t be found, they are skipped. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_ids [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_messages_with_http_info(chat_id, message_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_messages ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.delete_messages"
      end
      # verify the required parameter 'message_ids' is set
      if @api_client.config.client_side_validation && message_ids.nil?
        fail ArgumentError, "Missing the required parameter 'message_ids' when calling DefaultApi.delete_messages"
      end
      # resource path
      local_var_path = '/deleteMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_ids'] = @api_client.build_collection_param(message_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteMyCommands
    # Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :scope 
    # @option opts [String] :language_code 
    # @return [SetWebhook200Response]
    def delete_my_commands(opts = {})
      data, _status_code, _headers = delete_my_commands_with_http_info(opts)
      data
    end

    # deleteMyCommands
    # Use this method to delete the list of the bot&#39;s commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :scope 
    # @option opts [String] :language_code 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_my_commands_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_my_commands ...'
      end
      # resource path
      local_var_path = '/deleteMyCommands'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_my_commands",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_my_commands\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteStickerFromSet
    # Use this method to delete a sticker from a set created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_sticker_from_set(sticker, opts = {})
      data, _status_code, _headers = delete_sticker_from_set_with_http_info(sticker, opts)
      data
    end

    # deleteStickerFromSet
    # Use this method to delete a sticker from a set created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_sticker_from_set_with_http_info(sticker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_sticker_from_set ...'
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.delete_sticker_from_set"
      end
      # resource path
      local_var_path = '/deleteStickerFromSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sticker'] = sticker

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_sticker_from_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_sticker_from_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteStickerSet
    # Use this method to delete a sticker set that was created by the bot. Returns True on success.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def delete_sticker_set(name, opts = {})
      data, _status_code, _headers = delete_sticker_set_with_http_info(name, opts)
      data
    end

    # deleteStickerSet
    # Use this method to delete a sticker set that was created by the bot. Returns True on success.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_sticker_set_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_sticker_set ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.delete_sticker_set"
      end
      # resource path
      local_var_path = '/deleteStickerSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_sticker_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_sticker_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteWebhook
    # Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :drop_pending_updates 
    # @return [SetWebhook200Response]
    def delete_webhook(opts = {})
      data, _status_code, _headers = delete_webhook_with_http_info(opts)
      data
    end

    # deleteWebhook
    # Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :drop_pending_updates 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def delete_webhook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_webhook ...'
      end
      # resource path
      local_var_path = '/deleteWebhook'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'drop_pending_updates'] = opts[:'drop_pending_updates'] if !opts[:'drop_pending_updates'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editChatInviteLink
    # Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param invite_link [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :expire_date 
    # @option opts [Integer] :member_limit 
    # @option opts [Boolean] :creates_join_request 
    # @return [CreateChatInviteLink200Response]
    def edit_chat_invite_link(chat_id, invite_link, opts = {})
      data, _status_code, _headers = edit_chat_invite_link_with_http_info(chat_id, invite_link, opts)
      data
    end

    # editChatInviteLink
    # Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param invite_link [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :expire_date 
    # @option opts [Integer] :member_limit 
    # @option opts [Boolean] :creates_join_request 
    # @return [Array<(CreateChatInviteLink200Response, Integer, Hash)>] CreateChatInviteLink200Response data, response status code and response headers
    def edit_chat_invite_link_with_http_info(chat_id, invite_link, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_chat_invite_link ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.edit_chat_invite_link"
      end
      # verify the required parameter 'invite_link' is set
      if @api_client.config.client_side_validation && invite_link.nil?
        fail ArgumentError, "Missing the required parameter 'invite_link' when calling DefaultApi.edit_chat_invite_link"
      end
      # resource path
      local_var_path = '/editChatInviteLink'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'invite_link'] = invite_link
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'expire_date'] = opts[:'expire_date'] if !opts[:'expire_date'].nil?
      query_params[:'member_limit'] = opts[:'member_limit'] if !opts[:'member_limit'].nil?
      query_params[:'creates_join_request'] = opts[:'creates_join_request'] if !opts[:'creates_join_request'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateChatInviteLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_chat_invite_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_chat_invite_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editForumTopic
    # Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :icon_custom_emoji_id 
    # @return [SetWebhook200Response]
    def edit_forum_topic(chat_id, message_thread_id, opts = {})
      data, _status_code, _headers = edit_forum_topic_with_http_info(chat_id, message_thread_id, opts)
      data
    end

    # editForumTopic
    # Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :icon_custom_emoji_id 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def edit_forum_topic_with_http_info(chat_id, message_thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.edit_forum_topic"
      end
      # verify the required parameter 'message_thread_id' is set
      if @api_client.config.client_side_validation && message_thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_id' when calling DefaultApi.edit_forum_topic"
      end
      # resource path
      local_var_path = '/editForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_thread_id'] = message_thread_id
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'icon_custom_emoji_id'] = opts[:'icon_custom_emoji_id'] if !opts[:'icon_custom_emoji_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editGeneralForumTopic
    # Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def edit_general_forum_topic(chat_id, name, opts = {})
      data, _status_code, _headers = edit_general_forum_topic_with_http_info(chat_id, name, opts)
      data
    end

    # editGeneralForumTopic
    # Use this method to edit the name of the &#39;General&#39; topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def edit_general_forum_topic_with_http_info(chat_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_general_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.edit_general_forum_topic"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.edit_general_forum_topic"
      end
      # resource path
      local_var_path = '/editGeneralForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_general_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_general_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editMessageCaption
    # Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [EditMessageText200Response]
    def edit_message_caption(opts = {})
      data, _status_code, _headers = edit_message_caption_with_http_info(opts)
      data
    end

    # editMessageCaption
    # Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def edit_message_caption_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_message_caption ...'
      end
      # resource path
      local_var_path = '/editMessageCaption'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_message_caption",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_message_caption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editMessageLiveLocation
    # Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param latitude [Float] 
    # @param longitude [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [Float] :horizontal_accuracy 
    # @option opts [Integer] :heading 
    # @option opts [Integer] :proximity_alert_radius 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [EditMessageText200Response]
    def edit_message_live_location(latitude, longitude, opts = {})
      data, _status_code, _headers = edit_message_live_location_with_http_info(latitude, longitude, opts)
      data
    end

    # editMessageLiveLocation
    # Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param latitude [Float] 
    # @param longitude [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [Float] :horizontal_accuracy 
    # @option opts [Integer] :heading 
    # @option opts [Integer] :proximity_alert_radius 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def edit_message_live_location_with_http_info(latitude, longitude, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_message_live_location ...'
      end
      # verify the required parameter 'latitude' is set
      if @api_client.config.client_side_validation && latitude.nil?
        fail ArgumentError, "Missing the required parameter 'latitude' when calling DefaultApi.edit_message_live_location"
      end
      # verify the required parameter 'longitude' is set
      if @api_client.config.client_side_validation && longitude.nil?
        fail ArgumentError, "Missing the required parameter 'longitude' when calling DefaultApi.edit_message_live_location"
      end
      # resource path
      local_var_path = '/editMessageLiveLocation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?
      query_params[:'horizontal_accuracy'] = opts[:'horizontal_accuracy'] if !opts[:'horizontal_accuracy'].nil?
      query_params[:'heading'] = opts[:'heading'] if !opts[:'heading'].nil?
      query_params[:'proximity_alert_radius'] = opts[:'proximity_alert_radius'] if !opts[:'proximity_alert_radius'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_message_live_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_message_live_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editMessageMedia
    # Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param media [Object] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [EditMessageText200Response]
    def edit_message_media(media, opts = {})
      data, _status_code, _headers = edit_message_media_with_http_info(media, opts)
      data
    end

    # editMessageMedia
    # Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can&#39;t be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param media [Object] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def edit_message_media_with_http_info(media, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_message_media ...'
      end
      # verify the required parameter 'media' is set
      if @api_client.config.client_side_validation && media.nil?
        fail ArgumentError, "Missing the required parameter 'media' when calling DefaultApi.edit_message_media"
      end
      # resource path
      local_var_path = '/editMessageMedia'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'media'] = media
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_message_media",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_message_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editMessageReplyMarkup
    # Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [EditMessageText200Response]
    def edit_message_reply_markup(opts = {})
      data, _status_code, _headers = edit_message_reply_markup_with_http_info(opts)
      data
    end

    # editMessageReplyMarkup
    # Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def edit_message_reply_markup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_message_reply_markup ...'
      end
      # resource path
      local_var_path = '/editMessageReplyMarkup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_message_reply_markup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_message_reply_markup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # editMessageText
    # Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param text [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :entities 
    # @option opts [LinkPreviewOptions] :link_preview_options 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [EditMessageText200Response]
    def edit_message_text(text, opts = {})
      data, _status_code, _headers = edit_message_text_with_http_info(text, opts)
      data
    end

    # editMessageText
    # Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param text [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :entities 
    # @option opts [LinkPreviewOptions] :link_preview_options 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def edit_message_text_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.edit_message_text ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.edit_message_text"
      end
      # resource path
      local_var_path = '/editMessageText'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'entities'] = @api_client.build_collection_param(opts[:'entities'], :multi) if !opts[:'entities'].nil?
      query_params[:'link_preview_options'] = opts[:'link_preview_options'] if !opts[:'link_preview_options'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.edit_message_text",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#edit_message_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # exportChatInviteLink
    # Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [ExportChatInviteLink200Response]
    def export_chat_invite_link(chat_id, opts = {})
      data, _status_code, _headers = export_chat_invite_link_with_http_info(chat_id, opts)
      data
    end

    # exportChatInviteLink
    # Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportChatInviteLink200Response, Integer, Hash)>] ExportChatInviteLink200Response data, response status code and response headers
    def export_chat_invite_link_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.export_chat_invite_link ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.export_chat_invite_link"
      end
      # resource path
      local_var_path = '/exportChatInviteLink'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExportChatInviteLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.export_chat_invite_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#export_chat_invite_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # forwardMessage
    # Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @return [SendMessage200Response]
    def forward_message(chat_id, from_chat_id, message_id, opts = {})
      data, _status_code, _headers = forward_message_with_http_info(chat_id, from_chat_id, message_id, opts)
      data
    end

    # forwardMessage
    # Use this method to forward messages of any kind. Service messages and messages with protected content can&#39;t be forwarded. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def forward_message_with_http_info(chat_id, from_chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.forward_message ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.forward_message"
      end
      # verify the required parameter 'from_chat_id' is set
      if @api_client.config.client_side_validation && from_chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'from_chat_id' when calling DefaultApi.forward_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.forward_message"
      end
      # resource path
      local_var_path = '/forwardMessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'from_chat_id'] = from_chat_id
      query_params[:'message_id'] = message_id
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.forward_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#forward_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # forwardMessages
    # Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of MessageId of the sent messages is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_ids [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @return [ForwardMessages200Response]
    def forward_messages(chat_id, from_chat_id, message_ids, opts = {})
      data, _status_code, _headers = forward_messages_with_http_info(chat_id, from_chat_id, message_ids, opts)
      data
    end

    # forwardMessages
    # Use this method to forward multiple messages of any kind. If some of the specified messages can&#39;t be found or forwarded, they are skipped. Service messages and messages with protected content can&#39;t be forwarded. Album grouping is kept for forwarded messages. On success, an array of MessageId of the sent messages is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param from_chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_ids [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @return [Array<(ForwardMessages200Response, Integer, Hash)>] ForwardMessages200Response data, response status code and response headers
    def forward_messages_with_http_info(chat_id, from_chat_id, message_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.forward_messages ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.forward_messages"
      end
      # verify the required parameter 'from_chat_id' is set
      if @api_client.config.client_side_validation && from_chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'from_chat_id' when calling DefaultApi.forward_messages"
      end
      # verify the required parameter 'message_ids' is set
      if @api_client.config.client_side_validation && message_ids.nil?
        fail ArgumentError, "Missing the required parameter 'message_ids' when calling DefaultApi.forward_messages"
      end
      # resource path
      local_var_path = '/forwardMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'from_chat_id'] = from_chat_id
      query_params[:'message_ids'] = @api_client.build_collection_param(message_ids, :multi)
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ForwardMessages200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.forward_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#forward_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getBusinessConnection
    # Use this method to get information about the connection of the bot with a business account. Returns a BusinessConnection object on success.
    # @param business_connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetBusinessConnection200Response]
    def get_business_connection(business_connection_id, opts = {})
      data, _status_code, _headers = get_business_connection_with_http_info(business_connection_id, opts)
      data
    end

    # getBusinessConnection
    # Use this method to get information about the connection of the bot with a business account. Returns a BusinessConnection object on success.
    # @param business_connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBusinessConnection200Response, Integer, Hash)>] GetBusinessConnection200Response data, response status code and response headers
    def get_business_connection_with_http_info(business_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_business_connection ...'
      end
      # verify the required parameter 'business_connection_id' is set
      if @api_client.config.client_side_validation && business_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_connection_id' when calling DefaultApi.get_business_connection"
      end
      # resource path
      local_var_path = '/getBusinessConnection'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'business_connection_id'] = business_connection_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBusinessConnection200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_business_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_business_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getChat
    # Use this method to get up to date information about the chat. Returns a Chat object on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [GetChat200Response]
    def get_chat(chat_id, opts = {})
      data, _status_code, _headers = get_chat_with_http_info(chat_id, opts)
      data
    end

    # getChat
    # Use this method to get up to date information about the chat. Returns a Chat object on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetChat200Response, Integer, Hash)>] GetChat200Response data, response status code and response headers
    def get_chat_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_chat ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.get_chat"
      end
      # resource path
      local_var_path = '/getChat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChat200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getChatAdministrators
    # Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [GetChatAdministrators200Response]
    def get_chat_administrators(chat_id, opts = {})
      data, _status_code, _headers = get_chat_administrators_with_http_info(chat_id, opts)
      data
    end

    # getChatAdministrators
    # Use this method to get a list of administrators in a chat, which aren&#39;t bots. Returns an Array of ChatMember objects.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetChatAdministrators200Response, Integer, Hash)>] GetChatAdministrators200Response data, response status code and response headers
    def get_chat_administrators_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_chat_administrators ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.get_chat_administrators"
      end
      # resource path
      local_var_path = '/getChatAdministrators'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChatAdministrators200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_chat_administrators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_chat_administrators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getChatMember
    # Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [GetChatMember200Response]
    def get_chat_member(chat_id, user_id, opts = {})
      data, _status_code, _headers = get_chat_member_with_http_info(chat_id, user_id, opts)
      data
    end

    # getChatMember
    # Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetChatMember200Response, Integer, Hash)>] GetChatMember200Response data, response status code and response headers
    def get_chat_member_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_chat_member ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.get_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_chat_member"
      end
      # resource path
      local_var_path = '/getChatMember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChatMember200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_chat_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getChatMemberCount
    # Use this method to get the number of members in a chat. Returns Int on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [GetChatMemberCount200Response]
    def get_chat_member_count(chat_id, opts = {})
      data, _status_code, _headers = get_chat_member_count_with_http_info(chat_id, opts)
      data
    end

    # getChatMemberCount
    # Use this method to get the number of members in a chat. Returns Int on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetChatMemberCount200Response, Integer, Hash)>] GetChatMemberCount200Response data, response status code and response headers
    def get_chat_member_count_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_chat_member_count ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.get_chat_member_count"
      end
      # resource path
      local_var_path = '/getChatMemberCount'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChatMemberCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_chat_member_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_chat_member_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getChatMenuButton
    # Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :chat_id 
    # @return [GetChatMenuButton200Response]
    def get_chat_menu_button(opts = {})
      data, _status_code, _headers = get_chat_menu_button_with_http_info(opts)
      data
    end

    # getChatMenuButton
    # Use this method to get the current value of the bot&#39;s menu button in a private chat, or the default menu button. Returns MenuButton on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :chat_id 
    # @return [Array<(GetChatMenuButton200Response, Integer, Hash)>] GetChatMenuButton200Response data, response status code and response headers
    def get_chat_menu_button_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_chat_menu_button ...'
      end
      # resource path
      local_var_path = '/getChatMenuButton'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChatMenuButton200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_chat_menu_button",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_chat_menu_button\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCustomEmojiStickers
    # Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.
    # @param custom_emoji_ids [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [GetForumTopicIconStickers200Response]
    def get_custom_emoji_stickers(custom_emoji_ids, opts = {})
      data, _status_code, _headers = get_custom_emoji_stickers_with_http_info(custom_emoji_ids, opts)
      data
    end

    # getCustomEmojiStickers
    # Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.
    # @param custom_emoji_ids [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetForumTopicIconStickers200Response, Integer, Hash)>] GetForumTopicIconStickers200Response data, response status code and response headers
    def get_custom_emoji_stickers_with_http_info(custom_emoji_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_custom_emoji_stickers ...'
      end
      # verify the required parameter 'custom_emoji_ids' is set
      if @api_client.config.client_side_validation && custom_emoji_ids.nil?
        fail ArgumentError, "Missing the required parameter 'custom_emoji_ids' when calling DefaultApi.get_custom_emoji_stickers"
      end
      # resource path
      local_var_path = '/getCustomEmojiStickers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'custom_emoji_ids'] = @api_client.build_collection_param(custom_emoji_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetForumTopicIconStickers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_custom_emoji_stickers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_custom_emoji_stickers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFile
    # Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again. Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.
    # @param file_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetFile200Response]
    def get_file(file_id, opts = {})
      data, _status_code, _headers = get_file_with_http_info(file_id, opts)
      data
    end

    # getFile
    # Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;, where &lt;file_path&gt; is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again. Note: This function may not preserve the original file name and MIME type. You should save the file&#39;s MIME type and name (if available) when the File object is received.
    # @param file_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFile200Response, Integer, Hash)>] GetFile200Response data, response status code and response headers
    def get_file_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling DefaultApi.get_file"
      end
      # resource path
      local_var_path = '/getFile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'file_id'] = file_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFile200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getForumTopicIconStickers
    # Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.
    # @param [Hash] opts the optional parameters
    # @return [GetForumTopicIconStickers200Response]
    def get_forum_topic_icon_stickers(opts = {})
      data, _status_code, _headers = get_forum_topic_icon_stickers_with_http_info(opts)
      data
    end

    # getForumTopicIconStickers
    # Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetForumTopicIconStickers200Response, Integer, Hash)>] GetForumTopicIconStickers200Response data, response status code and response headers
    def get_forum_topic_icon_stickers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_forum_topic_icon_stickers ...'
      end
      # resource path
      local_var_path = '/getForumTopicIconStickers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetForumTopicIconStickers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_forum_topic_icon_stickers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_forum_topic_icon_stickers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getGameHighScores
    # Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @return [GetGameHighScores200Response]
    def get_game_high_scores(user_id, opts = {})
      data, _status_code, _headers = get_game_high_scores_with_http_info(user_id, opts)
      data
    end

    # getGameHighScores
    # Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @return [Array<(GetGameHighScores200Response, Integer, Hash)>] GetGameHighScores200Response data, response status code and response headers
    def get_game_high_scores_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_game_high_scores ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_game_high_scores"
      end
      # resource path
      local_var_path = '/getGameHighScores'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGameHighScores200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_game_high_scores",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_game_high_scores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMe
    # A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
    # @param [Hash] opts the optional parameters
    # @return [GetMe200Response]
    def get_me(opts = {})
      data, _status_code, _headers = get_me_with_http_info(opts)
      data
    end

    # getMe
    # A simple method for testing your bot&#39;s authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMe200Response, Integer, Hash)>] GetMe200Response data, response status code and response headers
    def get_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_me ...'
      end
      # resource path
      local_var_path = '/getMe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_me",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMyCommands
    # Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :scope 
    # @option opts [String] :language_code 
    # @return [GetMyCommands200Response]
    def get_my_commands(opts = {})
      data, _status_code, _headers = get_my_commands_with_http_info(opts)
      data
    end

    # getMyCommands
    # Use this method to get the current list of the bot&#39;s commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren&#39;t set, an empty list is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :scope 
    # @option opts [String] :language_code 
    # @return [Array<(GetMyCommands200Response, Integer, Hash)>] GetMyCommands200Response data, response status code and response headers
    def get_my_commands_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_my_commands ...'
      end
      # resource path
      local_var_path = '/getMyCommands'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMyCommands200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_my_commands",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_my_commands\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMyDefaultAdministratorRights
    # Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :for_channels 
    # @return [GetMyDefaultAdministratorRights200Response]
    def get_my_default_administrator_rights(opts = {})
      data, _status_code, _headers = get_my_default_administrator_rights_with_http_info(opts)
      data
    end

    # getMyDefaultAdministratorRights
    # Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :for_channels 
    # @return [Array<(GetMyDefaultAdministratorRights200Response, Integer, Hash)>] GetMyDefaultAdministratorRights200Response data, response status code and response headers
    def get_my_default_administrator_rights_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_my_default_administrator_rights ...'
      end
      # resource path
      local_var_path = '/getMyDefaultAdministratorRights'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'for_channels'] = opts[:'for_channels'] if !opts[:'for_channels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMyDefaultAdministratorRights200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_my_default_administrator_rights",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_my_default_administrator_rights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMyDescription
    # Use this method to get the current bot description for the given user language. Returns BotDescription on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code 
    # @return [GetMyDescription200Response]
    def get_my_description(opts = {})
      data, _status_code, _headers = get_my_description_with_http_info(opts)
      data
    end

    # getMyDescription
    # Use this method to get the current bot description for the given user language. Returns BotDescription on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code 
    # @return [Array<(GetMyDescription200Response, Integer, Hash)>] GetMyDescription200Response data, response status code and response headers
    def get_my_description_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_my_description ...'
      end
      # resource path
      local_var_path = '/getMyDescription'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMyDescription200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_my_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_my_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMyName
    # Use this method to get the current bot name for the given user language. Returns BotName on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code 
    # @return [GetMyName200Response]
    def get_my_name(opts = {})
      data, _status_code, _headers = get_my_name_with_http_info(opts)
      data
    end

    # getMyName
    # Use this method to get the current bot name for the given user language. Returns BotName on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code 
    # @return [Array<(GetMyName200Response, Integer, Hash)>] GetMyName200Response data, response status code and response headers
    def get_my_name_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_my_name ...'
      end
      # resource path
      local_var_path = '/getMyName'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMyName200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_my_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_my_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMyShortDescription
    # Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code 
    # @return [GetMyShortDescription200Response]
    def get_my_short_description(opts = {})
      data, _status_code, _headers = get_my_short_description_with_http_info(opts)
      data
    end

    # getMyShortDescription
    # Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code 
    # @return [Array<(GetMyShortDescription200Response, Integer, Hash)>] GetMyShortDescription200Response data, response status code and response headers
    def get_my_short_description_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_my_short_description ...'
      end
      # resource path
      local_var_path = '/getMyShortDescription'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMyShortDescription200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_my_short_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_my_short_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStickerSet
    # Use this method to get a sticker set. On success, a StickerSet object is returned.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetStickerSet200Response]
    def get_sticker_set(name, opts = {})
      data, _status_code, _headers = get_sticker_set_with_http_info(name, opts)
      data
    end

    # getStickerSet
    # Use this method to get a sticker set. On success, a StickerSet object is returned.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStickerSet200Response, Integer, Hash)>] GetStickerSet200Response data, response status code and response headers
    def get_sticker_set_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_sticker_set ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.get_sticker_set"
      end
      # resource path
      local_var_path = '/getStickerSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStickerSet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_sticker_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sticker_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getUpdates
    # Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :timeout 
    # @option opts [Array<String>] :allowed_updates 
    # @return [GetUpdates200Response]
    def get_updates(opts = {})
      data, _status_code, _headers = get_updates_with_http_info(opts)
      data
    end

    # getUpdates
    # Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :timeout 
    # @option opts [Array<String>] :allowed_updates 
    # @return [Array<(GetUpdates200Response, Integer, Hash)>] GetUpdates200Response data, response status code and response headers
    def get_updates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_updates ...'
      end
      # resource path
      local_var_path = '/getUpdates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'allowed_updates'] = @api_client.build_collection_param(opts[:'allowed_updates'], :multi) if !opts[:'allowed_updates'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUpdates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_updates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getUserChatBoosts
    # Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [GetUserChatBoosts200Response]
    def get_user_chat_boosts(chat_id, user_id, opts = {})
      data, _status_code, _headers = get_user_chat_boosts_with_http_info(chat_id, user_id, opts)
      data
    end

    # getUserChatBoosts
    # Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserChatBoosts200Response, Integer, Hash)>] GetUserChatBoosts200Response data, response status code and response headers
    def get_user_chat_boosts_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user_chat_boosts ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.get_user_chat_boosts"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user_chat_boosts"
      end
      # resource path
      local_var_path = '/getUserChatBoosts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserChatBoosts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_user_chat_boosts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user_chat_boosts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getUserProfilePhotos
    # Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @return [GetUserProfilePhotos200Response]
    def get_user_profile_photos(user_id, opts = {})
      data, _status_code, _headers = get_user_profile_photos_with_http_info(user_id, opts)
      data
    end

    # getUserProfilePhotos
    # Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @return [Array<(GetUserProfilePhotos200Response, Integer, Hash)>] GetUserProfilePhotos200Response data, response status code and response headers
    def get_user_profile_photos_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user_profile_photos ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user_profile_photos"
      end
      # resource path
      local_var_path = '/getUserProfilePhotos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserProfilePhotos200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_user_profile_photos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user_profile_photos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getWebhookInfo
    # Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.
    # @param [Hash] opts the optional parameters
    # @return [GetWebhookInfo200Response]
    def get_webhook_info(opts = {})
      data, _status_code, _headers = get_webhook_info_with_http_info(opts)
      data
    end

    # getWebhookInfo
    # Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWebhookInfo200Response, Integer, Hash)>] GetWebhookInfo200Response data, response status code and response headers
    def get_webhook_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_webhook_info ...'
      end
      # resource path
      local_var_path = '/getWebhookInfo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWebhookInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_webhook_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_webhook_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # hideGeneralForumTopic
    # Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def hide_general_forum_topic(chat_id, opts = {})
      data, _status_code, _headers = hide_general_forum_topic_with_http_info(chat_id, opts)
      data
    end

    # hideGeneralForumTopic
    # Use this method to hide the &#39;General&#39; topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def hide_general_forum_topic_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.hide_general_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.hide_general_forum_topic"
      end
      # resource path
      local_var_path = '/hideGeneralForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.hide_general_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#hide_general_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # leaveChat
    # Use this method for your bot to leave a group, supergroup or channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def leave_chat(chat_id, opts = {})
      data, _status_code, _headers = leave_chat_with_http_info(chat_id, opts)
      data
    end

    # leaveChat
    # Use this method for your bot to leave a group, supergroup or channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def leave_chat_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.leave_chat ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.leave_chat"
      end
      # resource path
      local_var_path = '/leaveChat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.leave_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#leave_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # logOut
    # Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def log_out(opts = {})
      data, _status_code, _headers = log_out_with_http_info(opts)
      data
    end

    # logOut
    # Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def log_out_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.log_out ...'
      end
      # resource path
      local_var_path = '/logOut'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.log_out",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#log_out\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # pinChatMessage
    # Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_notification 
    # @return [SetWebhook200Response]
    def pin_chat_message(chat_id, message_id, opts = {})
      data, _status_code, _headers = pin_chat_message_with_http_info(chat_id, message_id, opts)
      data
    end

    # pinChatMessage
    # Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can_pin_messages&#39; administrator right in a supergroup or &#39;can_edit_messages&#39; administrator right in a channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_notification 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def pin_chat_message_with_http_info(chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pin_chat_message ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.pin_chat_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.pin_chat_message"
      end
      # resource path
      local_var_path = '/pinChatMessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_id'] = message_id
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.pin_chat_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pin_chat_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # promoteChatMember
    # Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_anonymous 
    # @option opts [Boolean] :can_manage_chat 
    # @option opts [Boolean] :can_delete_messages 
    # @option opts [Boolean] :can_manage_video_chats 
    # @option opts [Boolean] :can_restrict_members 
    # @option opts [Boolean] :can_promote_members 
    # @option opts [Boolean] :can_change_info 
    # @option opts [Boolean] :can_invite_users 
    # @option opts [Boolean] :can_post_stories 
    # @option opts [Boolean] :can_edit_stories 
    # @option opts [Boolean] :can_delete_stories 
    # @option opts [Boolean] :can_post_messages 
    # @option opts [Boolean] :can_edit_messages 
    # @option opts [Boolean] :can_pin_messages 
    # @option opts [Boolean] :can_manage_topics 
    # @return [SetWebhook200Response]
    def promote_chat_member(chat_id, user_id, opts = {})
      data, _status_code, _headers = promote_chat_member_with_http_info(chat_id, user_id, opts)
      data
    end

    # promoteChatMember
    # Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_anonymous 
    # @option opts [Boolean] :can_manage_chat 
    # @option opts [Boolean] :can_delete_messages 
    # @option opts [Boolean] :can_manage_video_chats 
    # @option opts [Boolean] :can_restrict_members 
    # @option opts [Boolean] :can_promote_members 
    # @option opts [Boolean] :can_change_info 
    # @option opts [Boolean] :can_invite_users 
    # @option opts [Boolean] :can_post_stories 
    # @option opts [Boolean] :can_edit_stories 
    # @option opts [Boolean] :can_delete_stories 
    # @option opts [Boolean] :can_post_messages 
    # @option opts [Boolean] :can_edit_messages 
    # @option opts [Boolean] :can_pin_messages 
    # @option opts [Boolean] :can_manage_topics 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def promote_chat_member_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.promote_chat_member ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.promote_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.promote_chat_member"
      end
      # resource path
      local_var_path = '/promoteChatMember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id
      query_params[:'is_anonymous'] = opts[:'is_anonymous'] if !opts[:'is_anonymous'].nil?
      query_params[:'can_manage_chat'] = opts[:'can_manage_chat'] if !opts[:'can_manage_chat'].nil?
      query_params[:'can_delete_messages'] = opts[:'can_delete_messages'] if !opts[:'can_delete_messages'].nil?
      query_params[:'can_manage_video_chats'] = opts[:'can_manage_video_chats'] if !opts[:'can_manage_video_chats'].nil?
      query_params[:'can_restrict_members'] = opts[:'can_restrict_members'] if !opts[:'can_restrict_members'].nil?
      query_params[:'can_promote_members'] = opts[:'can_promote_members'] if !opts[:'can_promote_members'].nil?
      query_params[:'can_change_info'] = opts[:'can_change_info'] if !opts[:'can_change_info'].nil?
      query_params[:'can_invite_users'] = opts[:'can_invite_users'] if !opts[:'can_invite_users'].nil?
      query_params[:'can_post_stories'] = opts[:'can_post_stories'] if !opts[:'can_post_stories'].nil?
      query_params[:'can_edit_stories'] = opts[:'can_edit_stories'] if !opts[:'can_edit_stories'].nil?
      query_params[:'can_delete_stories'] = opts[:'can_delete_stories'] if !opts[:'can_delete_stories'].nil?
      query_params[:'can_post_messages'] = opts[:'can_post_messages'] if !opts[:'can_post_messages'].nil?
      query_params[:'can_edit_messages'] = opts[:'can_edit_messages'] if !opts[:'can_edit_messages'].nil?
      query_params[:'can_pin_messages'] = opts[:'can_pin_messages'] if !opts[:'can_pin_messages'].nil?
      query_params[:'can_manage_topics'] = opts[:'can_manage_topics'] if !opts[:'can_manage_topics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.promote_chat_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#promote_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # reopenForumTopic
    # Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def reopen_forum_topic(chat_id, message_thread_id, opts = {})
      data, _status_code, _headers = reopen_forum_topic_with_http_info(chat_id, message_thread_id, opts)
      data
    end

    # reopenForumTopic
    # Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def reopen_forum_topic_with_http_info(chat_id, message_thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reopen_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.reopen_forum_topic"
      end
      # verify the required parameter 'message_thread_id' is set
      if @api_client.config.client_side_validation && message_thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_id' when calling DefaultApi.reopen_forum_topic"
      end
      # resource path
      local_var_path = '/reopenForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_thread_id'] = message_thread_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reopen_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reopen_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # reopenGeneralForumTopic
    # Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def reopen_general_forum_topic(chat_id, opts = {})
      data, _status_code, _headers = reopen_general_forum_topic_with_http_info(chat_id, opts)
      data
    end

    # reopenGeneralForumTopic
    # Use this method to reopen a closed &#39;General&#39; topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def reopen_general_forum_topic_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reopen_general_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.reopen_general_forum_topic"
      end
      # resource path
      local_var_path = '/reopenGeneralForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reopen_general_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reopen_general_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replaceStickerInSet
    # Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, then setStickerPositionInSet. Returns True on success.
    # @param user_id [Integer] 
    # @param name [String] 
    # @param old_sticker [String] 
    # @param sticker [InputSticker] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def replace_sticker_in_set(user_id, name, old_sticker, sticker, opts = {})
      data, _status_code, _headers = replace_sticker_in_set_with_http_info(user_id, name, old_sticker, sticker, opts)
      data
    end

    # replaceStickerInSet
    # Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, then setStickerPositionInSet. Returns True on success.
    # @param user_id [Integer] 
    # @param name [String] 
    # @param old_sticker [String] 
    # @param sticker [InputSticker] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def replace_sticker_in_set_with_http_info(user_id, name, old_sticker, sticker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.replace_sticker_in_set ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.replace_sticker_in_set"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.replace_sticker_in_set"
      end
      # verify the required parameter 'old_sticker' is set
      if @api_client.config.client_side_validation && old_sticker.nil?
        fail ArgumentError, "Missing the required parameter 'old_sticker' when calling DefaultApi.replace_sticker_in_set"
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.replace_sticker_in_set"
      end
      # resource path
      local_var_path = '/replaceStickerInSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'name'] = name
      query_params[:'old_sticker'] = old_sticker
      query_params[:'sticker'] = sticker

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.replace_sticker_in_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#replace_sticker_in_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # restrictChatMember
    # Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param permissions [ChatPermissions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_independent_chat_permissions 
    # @option opts [Integer] :until_date 
    # @return [SetWebhook200Response]
    def restrict_chat_member(chat_id, user_id, permissions, opts = {})
      data, _status_code, _headers = restrict_chat_member_with_http_info(chat_id, user_id, permissions, opts)
      data
    end

    # restrictChatMember
    # Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param permissions [ChatPermissions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_independent_chat_permissions 
    # @option opts [Integer] :until_date 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def restrict_chat_member_with_http_info(chat_id, user_id, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.restrict_chat_member ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.restrict_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.restrict_chat_member"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling DefaultApi.restrict_chat_member"
      end
      # resource path
      local_var_path = '/restrictChatMember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id
      query_params[:'permissions'] = permissions
      query_params[:'use_independent_chat_permissions'] = opts[:'use_independent_chat_permissions'] if !opts[:'use_independent_chat_permissions'].nil?
      query_params[:'until_date'] = opts[:'until_date'] if !opts[:'until_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.restrict_chat_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#restrict_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # revokeChatInviteLink
    # Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param invite_link [String] 
    # @param [Hash] opts the optional parameters
    # @return [CreateChatInviteLink200Response]
    def revoke_chat_invite_link(chat_id, invite_link, opts = {})
      data, _status_code, _headers = revoke_chat_invite_link_with_http_info(chat_id, invite_link, opts)
      data
    end

    # revokeChatInviteLink
    # Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param invite_link [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateChatInviteLink200Response, Integer, Hash)>] CreateChatInviteLink200Response data, response status code and response headers
    def revoke_chat_invite_link_with_http_info(chat_id, invite_link, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.revoke_chat_invite_link ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.revoke_chat_invite_link"
      end
      # verify the required parameter 'invite_link' is set
      if @api_client.config.client_side_validation && invite_link.nil?
        fail ArgumentError, "Missing the required parameter 'invite_link' when calling DefaultApi.revoke_chat_invite_link"
      end
      # resource path
      local_var_path = '/revokeChatInviteLink'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'invite_link'] = invite_link

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateChatInviteLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.revoke_chat_invite_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#revoke_chat_invite_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendAnimation
    # Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param animation [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :duration 
    # @option opts [Integer] :width 
    # @option opts [Integer] :height 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :has_spoiler 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_animation(chat_id, animation, opts = {})
      data, _status_code, _headers = send_animation_with_http_info(chat_id, animation, opts)
      data
    end

    # sendAnimation
    # Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param animation [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :duration 
    # @option opts [Integer] :width 
    # @option opts [Integer] :height 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :has_spoiler 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_animation_with_http_info(chat_id, animation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_animation ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_animation"
      end
      # verify the required parameter 'animation' is set
      if @api_client.config.client_side_validation && animation.nil?
        fail ArgumentError, "Missing the required parameter 'animation' when calling DefaultApi.send_animation"
      end
      # resource path
      local_var_path = '/sendAnimation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'animation'] = animation
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'thumbnail'] = opts[:'thumbnail'] if !opts[:'thumbnail'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'has_spoiler'] = opts[:'has_spoiler'] if !opts[:'has_spoiler'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_animation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_animation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendAudio
    # Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the sendVoice method instead.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param audio [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Integer] :duration 
    # @option opts [String] :performer 
    # @option opts [String] :title 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_audio(chat_id, audio, opts = {})
      data, _status_code, _headers = send_audio_with_http_info(chat_id, audio, opts)
      data
    end

    # sendAudio
    # Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the sendVoice method instead.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param audio [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Integer] :duration 
    # @option opts [String] :performer 
    # @option opts [String] :title 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_audio_with_http_info(chat_id, audio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_audio ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_audio"
      end
      # verify the required parameter 'audio' is set
      if @api_client.config.client_side_validation && audio.nil?
        fail ArgumentError, "Missing the required parameter 'audio' when calling DefaultApi.send_audio"
      end
      # resource path
      local_var_path = '/sendAudio'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'audio'] = audio
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'performer'] = opts[:'performer'] if !opts[:'performer'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'thumbnail'] = opts[:'thumbnail'] if !opts[:'thumbnail'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_audio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_audio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendChatAction
    # Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param action [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @return [SetWebhook200Response]
    def send_chat_action(chat_id, action, opts = {})
      data, _status_code, _headers = send_chat_action_with_http_info(chat_id, action, opts)
      data
    end

    # sendChatAction
    # Use this method when you need to tell the user that something is happening on the bot&#39;s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param action [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def send_chat_action_with_http_info(chat_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_chat_action ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_chat_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.send_chat_action"
      end
      # resource path
      local_var_path = '/sendChatAction'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'action'] = action
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_chat_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_chat_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendContact
    # Use this method to send phone contacts. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param phone_number [String] 
    # @param first_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :last_name 
    # @option opts [String] :vcard 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_contact(chat_id, phone_number, first_name, opts = {})
      data, _status_code, _headers = send_contact_with_http_info(chat_id, phone_number, first_name, opts)
      data
    end

    # sendContact
    # Use this method to send phone contacts. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param phone_number [String] 
    # @param first_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :last_name 
    # @option opts [String] :vcard 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_contact_with_http_info(chat_id, phone_number, first_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_contact ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_contact"
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling DefaultApi.send_contact"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling DefaultApi.send_contact"
      end
      # resource path
      local_var_path = '/sendContact'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'phone_number'] = phone_number
      query_params[:'first_name'] = first_name
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'vcard'] = opts[:'vcard'] if !opts[:'vcard'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendDice
    # Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :emoji 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_dice(chat_id, opts = {})
      data, _status_code, _headers = send_dice_with_http_info(chat_id, opts)
      data
    end

    # sendDice
    # Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :emoji 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_dice_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_dice ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_dice"
      end
      # resource path
      local_var_path = '/sendDice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'emoji'] = opts[:'emoji'] if !opts[:'emoji'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_dice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_dice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendDocument
    # Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param document [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :disable_content_type_detection 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_document(chat_id, document, opts = {})
      data, _status_code, _headers = send_document_with_http_info(chat_id, document, opts)
      data
    end

    # sendDocument
    # Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param document [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :disable_content_type_detection 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_document_with_http_info(chat_id, document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_document ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_document"
      end
      # verify the required parameter 'document' is set
      if @api_client.config.client_side_validation && document.nil?
        fail ArgumentError, "Missing the required parameter 'document' when calling DefaultApi.send_document"
      end
      # resource path
      local_var_path = '/sendDocument'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'document'] = document
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'thumbnail'] = opts[:'thumbnail'] if !opts[:'thumbnail'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'disable_content_type_detection'] = opts[:'disable_content_type_detection'] if !opts[:'disable_content_type_detection'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendGame
    # Use this method to send a game. On success, the sent Message is returned.
    # @param chat_id [Integer] 
    # @param game_short_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [SendMessage200Response]
    def send_game(chat_id, game_short_name, opts = {})
      data, _status_code, _headers = send_game_with_http_info(chat_id, game_short_name, opts)
      data
    end

    # sendGame
    # Use this method to send a game. On success, the sent Message is returned.
    # @param chat_id [Integer] 
    # @param game_short_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_game_with_http_info(chat_id, game_short_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_game ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_game"
      end
      # verify the required parameter 'game_short_name' is set
      if @api_client.config.client_side_validation && game_short_name.nil?
        fail ArgumentError, "Missing the required parameter 'game_short_name' when calling DefaultApi.send_game"
      end
      # resource path
      local_var_path = '/sendGame'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'game_short_name'] = game_short_name
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_game",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_game\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendInvoice
    # Use this method to send invoices. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param title [String] 
    # @param description [String] 
    # @param payload [String] 
    # @param provider_token [String] 
    # @param currency [String] 
    # @param prices [Array<LabeledPrice>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :max_tip_amount 
    # @option opts [Array<Integer>] :suggested_tip_amounts 
    # @option opts [String] :start_parameter 
    # @option opts [String] :provider_data 
    # @option opts [String] :photo_url 
    # @option opts [Integer] :photo_size 
    # @option opts [Integer] :photo_width 
    # @option opts [Integer] :photo_height 
    # @option opts [Boolean] :need_name 
    # @option opts [Boolean] :need_phone_number 
    # @option opts [Boolean] :need_email 
    # @option opts [Boolean] :need_shipping_address 
    # @option opts [Boolean] :send_phone_number_to_provider 
    # @option opts [Boolean] :send_email_to_provider 
    # @option opts [Boolean] :is_flexible 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [SendMessage200Response]
    def send_invoice(chat_id, title, description, payload, provider_token, currency, prices, opts = {})
      data, _status_code, _headers = send_invoice_with_http_info(chat_id, title, description, payload, provider_token, currency, prices, opts)
      data
    end

    # sendInvoice
    # Use this method to send invoices. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param title [String] 
    # @param description [String] 
    # @param payload [String] 
    # @param provider_token [String] 
    # @param currency [String] 
    # @param prices [Array<LabeledPrice>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :max_tip_amount 
    # @option opts [Array<Integer>] :suggested_tip_amounts 
    # @option opts [String] :start_parameter 
    # @option opts [String] :provider_data 
    # @option opts [String] :photo_url 
    # @option opts [Integer] :photo_size 
    # @option opts [Integer] :photo_width 
    # @option opts [Integer] :photo_height 
    # @option opts [Boolean] :need_name 
    # @option opts [Boolean] :need_phone_number 
    # @option opts [Boolean] :need_email 
    # @option opts [Boolean] :need_shipping_address 
    # @option opts [Boolean] :send_phone_number_to_provider 
    # @option opts [Boolean] :send_email_to_provider 
    # @option opts [Boolean] :is_flexible 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_invoice_with_http_info(chat_id, title, description, payload, provider_token, currency, prices, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_invoice ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_invoice"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.send_invoice"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling DefaultApi.send_invoice"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling DefaultApi.send_invoice"
      end
      # verify the required parameter 'provider_token' is set
      if @api_client.config.client_side_validation && provider_token.nil?
        fail ArgumentError, "Missing the required parameter 'provider_token' when calling DefaultApi.send_invoice"
      end
      # verify the required parameter 'currency' is set
      if @api_client.config.client_side_validation && currency.nil?
        fail ArgumentError, "Missing the required parameter 'currency' when calling DefaultApi.send_invoice"
      end
      # verify the required parameter 'prices' is set
      if @api_client.config.client_side_validation && prices.nil?
        fail ArgumentError, "Missing the required parameter 'prices' when calling DefaultApi.send_invoice"
      end
      # resource path
      local_var_path = '/sendInvoice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'title'] = title
      query_params[:'description'] = description
      query_params[:'payload'] = payload
      query_params[:'provider_token'] = provider_token
      query_params[:'currency'] = currency
      query_params[:'prices'] = @api_client.build_collection_param(prices, :multi)
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'max_tip_amount'] = opts[:'max_tip_amount'] if !opts[:'max_tip_amount'].nil?
      query_params[:'suggested_tip_amounts'] = @api_client.build_collection_param(opts[:'suggested_tip_amounts'], :multi) if !opts[:'suggested_tip_amounts'].nil?
      query_params[:'start_parameter'] = opts[:'start_parameter'] if !opts[:'start_parameter'].nil?
      query_params[:'provider_data'] = opts[:'provider_data'] if !opts[:'provider_data'].nil?
      query_params[:'photo_url'] = opts[:'photo_url'] if !opts[:'photo_url'].nil?
      query_params[:'photo_size'] = opts[:'photo_size'] if !opts[:'photo_size'].nil?
      query_params[:'photo_width'] = opts[:'photo_width'] if !opts[:'photo_width'].nil?
      query_params[:'photo_height'] = opts[:'photo_height'] if !opts[:'photo_height'].nil?
      query_params[:'need_name'] = opts[:'need_name'] if !opts[:'need_name'].nil?
      query_params[:'need_phone_number'] = opts[:'need_phone_number'] if !opts[:'need_phone_number'].nil?
      query_params[:'need_email'] = opts[:'need_email'] if !opts[:'need_email'].nil?
      query_params[:'need_shipping_address'] = opts[:'need_shipping_address'] if !opts[:'need_shipping_address'].nil?
      query_params[:'send_phone_number_to_provider'] = opts[:'send_phone_number_to_provider'] if !opts[:'send_phone_number_to_provider'].nil?
      query_params[:'send_email_to_provider'] = opts[:'send_email_to_provider'] if !opts[:'send_email_to_provider'].nil?
      query_params[:'is_flexible'] = opts[:'is_flexible'] if !opts[:'is_flexible'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendLocation
    # Use this method to send point on the map. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param latitude [Float] 
    # @param longitude [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Float] :horizontal_accuracy 
    # @option opts [Integer] :live_period 
    # @option opts [Integer] :heading 
    # @option opts [Integer] :proximity_alert_radius 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_location(chat_id, latitude, longitude, opts = {})
      data, _status_code, _headers = send_location_with_http_info(chat_id, latitude, longitude, opts)
      data
    end

    # sendLocation
    # Use this method to send point on the map. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param latitude [Float] 
    # @param longitude [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Float] :horizontal_accuracy 
    # @option opts [Integer] :live_period 
    # @option opts [Integer] :heading 
    # @option opts [Integer] :proximity_alert_radius 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_location_with_http_info(chat_id, latitude, longitude, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_location ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_location"
      end
      # verify the required parameter 'latitude' is set
      if @api_client.config.client_side_validation && latitude.nil?
        fail ArgumentError, "Missing the required parameter 'latitude' when calling DefaultApi.send_location"
      end
      # verify the required parameter 'longitude' is set
      if @api_client.config.client_side_validation && longitude.nil?
        fail ArgumentError, "Missing the required parameter 'longitude' when calling DefaultApi.send_location"
      end
      # resource path
      local_var_path = '/sendLocation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'horizontal_accuracy'] = opts[:'horizontal_accuracy'] if !opts[:'horizontal_accuracy'].nil?
      query_params[:'live_period'] = opts[:'live_period'] if !opts[:'live_period'].nil?
      query_params[:'heading'] = opts[:'heading'] if !opts[:'heading'].nil?
      query_params[:'proximity_alert_radius'] = opts[:'proximity_alert_radius'] if !opts[:'proximity_alert_radius'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendMediaGroup
    # Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param media [Hash<String, SendMediaGroupMediaParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @return [SendMediaGroup200Response]
    def send_media_group(chat_id, media, opts = {})
      data, _status_code, _headers = send_media_group_with_http_info(chat_id, media, opts)
      data
    end

    # sendMediaGroup
    # Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param media [Hash<String, SendMediaGroupMediaParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @return [Array<(SendMediaGroup200Response, Integer, Hash)>] SendMediaGroup200Response data, response status code and response headers
    def send_media_group_with_http_info(chat_id, media, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_media_group ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_media_group"
      end
      # verify the required parameter 'media' is set
      if @api_client.config.client_side_validation && media.nil?
        fail ArgumentError, "Missing the required parameter 'media' when calling DefaultApi.send_media_group"
      end
      # resource path
      local_var_path = '/sendMediaGroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'media'] = media
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMediaGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_media_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_media_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendMessage
    # Use this method to send text messages. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param text [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :entities 
    # @option opts [LinkPreviewOptions] :link_preview_options 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_message(chat_id, text, opts = {})
      data, _status_code, _headers = send_message_with_http_info(chat_id, text, opts)
      data
    end

    # sendMessage
    # Use this method to send text messages. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param text [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :entities 
    # @option opts [LinkPreviewOptions] :link_preview_options 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_message_with_http_info(chat_id, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_message ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_message"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.send_message"
      end
      # resource path
      local_var_path = '/sendMessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'text'] = text
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'entities'] = @api_client.build_collection_param(opts[:'entities'], :multi) if !opts[:'entities'].nil?
      query_params[:'link_preview_options'] = opts[:'link_preview_options'] if !opts[:'link_preview_options'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendPhoto
    # Use this method to send photos. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param photo [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :has_spoiler 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_photo(chat_id, photo, opts = {})
      data, _status_code, _headers = send_photo_with_http_info(chat_id, photo, opts)
      data
    end

    # sendPhoto
    # Use this method to send photos. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param photo [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :has_spoiler 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_photo_with_http_info(chat_id, photo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_photo ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_photo"
      end
      # verify the required parameter 'photo' is set
      if @api_client.config.client_side_validation && photo.nil?
        fail ArgumentError, "Missing the required parameter 'photo' when calling DefaultApi.send_photo"
      end
      # resource path
      local_var_path = '/sendPhoto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'photo'] = photo
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'has_spoiler'] = opts[:'has_spoiler'] if !opts[:'has_spoiler'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_photo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendPoll
    # Use this method to send a native poll. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param question [String] 
    # @param options [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :is_anonymous 
    # @option opts [String] :type 
    # @option opts [Boolean] :allows_multiple_answers 
    # @option opts [Integer] :correct_option_id 
    # @option opts [String] :explanation 
    # @option opts [String] :explanation_parse_mode 
    # @option opts [Array<MessageEntity>] :explanation_entities 
    # @option opts [Integer] :open_period 
    # @option opts [Integer] :close_date 
    # @option opts [Boolean] :is_closed 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_poll(chat_id, question, options, opts = {})
      data, _status_code, _headers = send_poll_with_http_info(chat_id, question, options, opts)
      data
    end

    # sendPoll
    # Use this method to send a native poll. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param question [String] 
    # @param options [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Boolean] :is_anonymous 
    # @option opts [String] :type 
    # @option opts [Boolean] :allows_multiple_answers 
    # @option opts [Integer] :correct_option_id 
    # @option opts [String] :explanation 
    # @option opts [String] :explanation_parse_mode 
    # @option opts [Array<MessageEntity>] :explanation_entities 
    # @option opts [Integer] :open_period 
    # @option opts [Integer] :close_date 
    # @option opts [Boolean] :is_closed 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_poll_with_http_info(chat_id, question, options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_poll ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_poll"
      end
      # verify the required parameter 'question' is set
      if @api_client.config.client_side_validation && question.nil?
        fail ArgumentError, "Missing the required parameter 'question' when calling DefaultApi.send_poll"
      end
      # verify the required parameter 'options' is set
      if @api_client.config.client_side_validation && options.nil?
        fail ArgumentError, "Missing the required parameter 'options' when calling DefaultApi.send_poll"
      end
      # resource path
      local_var_path = '/sendPoll'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'question'] = question
      query_params[:'options'] = @api_client.build_collection_param(options, :multi)
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'is_anonymous'] = opts[:'is_anonymous'] if !opts[:'is_anonymous'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'allows_multiple_answers'] = opts[:'allows_multiple_answers'] if !opts[:'allows_multiple_answers'].nil?
      query_params[:'correct_option_id'] = opts[:'correct_option_id'] if !opts[:'correct_option_id'].nil?
      query_params[:'explanation'] = opts[:'explanation'] if !opts[:'explanation'].nil?
      query_params[:'explanation_parse_mode'] = opts[:'explanation_parse_mode'] if !opts[:'explanation_parse_mode'].nil?
      query_params[:'explanation_entities'] = @api_client.build_collection_param(opts[:'explanation_entities'], :multi) if !opts[:'explanation_entities'].nil?
      query_params[:'open_period'] = opts[:'open_period'] if !opts[:'open_period'].nil?
      query_params[:'close_date'] = opts[:'close_date'] if !opts[:'close_date'].nil?
      query_params[:'is_closed'] = opts[:'is_closed'] if !opts[:'is_closed'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_poll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_poll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendSticker
    # Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sticker [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :emoji 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_sticker(chat_id, sticker, opts = {})
      data, _status_code, _headers = send_sticker_with_http_info(chat_id, sticker, opts)
      data
    end

    # sendSticker
    # Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sticker [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :emoji 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_sticker_with_http_info(chat_id, sticker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_sticker ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_sticker"
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.send_sticker"
      end
      # resource path
      local_var_path = '/sendSticker'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'sticker'] = sticker
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'emoji'] = opts[:'emoji'] if !opts[:'emoji'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_sticker",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_sticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendVenue
    # Use this method to send information about a venue. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param latitude [Float] 
    # @param longitude [Float] 
    # @param title [String] 
    # @param address [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :foursquare_id 
    # @option opts [String] :foursquare_type 
    # @option opts [String] :google_place_id 
    # @option opts [String] :google_place_type 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_venue(chat_id, latitude, longitude, title, address, opts = {})
      data, _status_code, _headers = send_venue_with_http_info(chat_id, latitude, longitude, title, address, opts)
      data
    end

    # sendVenue
    # Use this method to send information about a venue. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param latitude [Float] 
    # @param longitude [Float] 
    # @param title [String] 
    # @param address [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :foursquare_id 
    # @option opts [String] :foursquare_type 
    # @option opts [String] :google_place_id 
    # @option opts [String] :google_place_type 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_venue_with_http_info(chat_id, latitude, longitude, title, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_venue ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_venue"
      end
      # verify the required parameter 'latitude' is set
      if @api_client.config.client_side_validation && latitude.nil?
        fail ArgumentError, "Missing the required parameter 'latitude' when calling DefaultApi.send_venue"
      end
      # verify the required parameter 'longitude' is set
      if @api_client.config.client_side_validation && longitude.nil?
        fail ArgumentError, "Missing the required parameter 'longitude' when calling DefaultApi.send_venue"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.send_venue"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling DefaultApi.send_venue"
      end
      # resource path
      local_var_path = '/sendVenue'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude
      query_params[:'title'] = title
      query_params[:'address'] = address
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'foursquare_id'] = opts[:'foursquare_id'] if !opts[:'foursquare_id'].nil?
      query_params[:'foursquare_type'] = opts[:'foursquare_type'] if !opts[:'foursquare_type'].nil?
      query_params[:'google_place_id'] = opts[:'google_place_id'] if !opts[:'google_place_id'].nil?
      query_params[:'google_place_type'] = opts[:'google_place_type'] if !opts[:'google_place_type'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_venue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_venue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendVideo
    # Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param video [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :duration 
    # @option opts [Integer] :width 
    # @option opts [Integer] :height 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :has_spoiler 
    # @option opts [Boolean] :supports_streaming 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_video(chat_id, video, opts = {})
      data, _status_code, _headers = send_video_with_http_info(chat_id, video, opts)
      data
    end

    # sendVideo
    # Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param video [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :duration 
    # @option opts [Integer] :width 
    # @option opts [Integer] :height 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Boolean] :has_spoiler 
    # @option opts [Boolean] :supports_streaming 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_video_with_http_info(chat_id, video, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_video ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_video"
      end
      # verify the required parameter 'video' is set
      if @api_client.config.client_side_validation && video.nil?
        fail ArgumentError, "Missing the required parameter 'video' when calling DefaultApi.send_video"
      end
      # resource path
      local_var_path = '/sendVideo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'video'] = video
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'thumbnail'] = opts[:'thumbnail'] if !opts[:'thumbnail'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'has_spoiler'] = opts[:'has_spoiler'] if !opts[:'has_spoiler'].nil?
      query_params[:'supports_streaming'] = opts[:'supports_streaming'] if !opts[:'supports_streaming'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_video",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendVideoNote
    # As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param video_note [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :duration 
    # @option opts [Integer] :length 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_video_note(chat_id, video_note, opts = {})
      data, _status_code, _headers = send_video_note_with_http_info(chat_id, video_note, opts)
      data
    end

    # sendVideoNote
    # As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param video_note [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [Integer] :duration 
    # @option opts [Integer] :length 
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_video_note_with_http_info(chat_id, video_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_video_note ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_video_note"
      end
      # verify the required parameter 'video_note' is set
      if @api_client.config.client_side_validation && video_note.nil?
        fail ArgumentError, "Missing the required parameter 'video_note' when calling DefaultApi.send_video_note"
      end
      # resource path
      local_var_path = '/sendVideoNote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'video_note'] = video_note
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'length'] = opts[:'length'] if !opts[:'length'].nil?
      query_params[:'thumbnail'] = opts[:'thumbnail'] if !opts[:'thumbnail'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_video_note",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_video_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sendVoice
    # Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param voice [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Integer] :duration 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [SendMessage200Response]
    def send_voice(chat_id, voice, opts = {})
      data, _status_code, _headers = send_voice_with_http_info(chat_id, voice, opts)
      data
    end

    # sendVoice
    # Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param voice [Hash<String, SendPhotoPhotoParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :business_connection_id 
    # @option opts [Integer] :message_thread_id 
    # @option opts [String] :caption 
    # @option opts [String] :parse_mode 
    # @option opts [Array<MessageEntity>] :caption_entities 
    # @option opts [Integer] :duration 
    # @option opts [Boolean] :disable_notification 
    # @option opts [Boolean] :protect_content 
    # @option opts [ReplyParameters] :reply_parameters 
    # @option opts [Hash<String, SendMessageReplyMarkupParameterValue>] :reply_markup 
    # @return [Array<(SendMessage200Response, Integer, Hash)>] SendMessage200Response data, response status code and response headers
    def send_voice_with_http_info(chat_id, voice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_voice ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.send_voice"
      end
      # verify the required parameter 'voice' is set
      if @api_client.config.client_side_validation && voice.nil?
        fail ArgumentError, "Missing the required parameter 'voice' when calling DefaultApi.send_voice"
      end
      # resource path
      local_var_path = '/sendVoice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'voice'] = voice
      query_params[:'business_connection_id'] = opts[:'business_connection_id'] if !opts[:'business_connection_id'].nil?
      query_params[:'message_thread_id'] = opts[:'message_thread_id'] if !opts[:'message_thread_id'].nil?
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?
      query_params[:'parse_mode'] = opts[:'parse_mode'] if !opts[:'parse_mode'].nil?
      query_params[:'caption_entities'] = @api_client.build_collection_param(opts[:'caption_entities'], :multi) if !opts[:'caption_entities'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?
      query_params[:'protect_content'] = opts[:'protect_content'] if !opts[:'protect_content'].nil?
      query_params[:'reply_parameters'] = opts[:'reply_parameters'] if !opts[:'reply_parameters'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendMessage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.send_voice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_voice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatAdministratorCustomTitle
    # Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param custom_title [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_chat_administrator_custom_title(chat_id, user_id, custom_title, opts = {})
      data, _status_code, _headers = set_chat_administrator_custom_title_with_http_info(chat_id, user_id, custom_title, opts)
      data
    end

    # setChatAdministratorCustomTitle
    # Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param custom_title [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_administrator_custom_title_with_http_info(chat_id, user_id, custom_title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_administrator_custom_title ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_chat_administrator_custom_title"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.set_chat_administrator_custom_title"
      end
      # verify the required parameter 'custom_title' is set
      if @api_client.config.client_side_validation && custom_title.nil?
        fail ArgumentError, "Missing the required parameter 'custom_title' when calling DefaultApi.set_chat_administrator_custom_title"
      end
      # resource path
      local_var_path = '/setChatAdministratorCustomTitle'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id
      query_params[:'custom_title'] = custom_title

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_administrator_custom_title",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_administrator_custom_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatDescription
    # Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @return [SetWebhook200Response]
    def set_chat_description(chat_id, opts = {})
      data, _status_code, _headers = set_chat_description_with_http_info(chat_id, opts)
      data
    end

    # setChatDescription
    # Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_description_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_description ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_chat_description"
      end
      # resource path
      local_var_path = '/setChatDescription'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatMenuButton
    # Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :chat_id 
    # @option opts [Object] :menu_button 
    # @return [SetWebhook200Response]
    def set_chat_menu_button(opts = {})
      data, _status_code, _headers = set_chat_menu_button_with_http_info(opts)
      data
    end

    # setChatMenuButton
    # Use this method to change the bot&#39;s menu button in a private chat, or the default menu button. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :chat_id 
    # @option opts [Object] :menu_button 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_menu_button_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_menu_button ...'
      end
      # resource path
      local_var_path = '/setChatMenuButton'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'menu_button'] = opts[:'menu_button'] if !opts[:'menu_button'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_menu_button",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_menu_button\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatPermissions
    # Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param permissions [ChatPermissions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_independent_chat_permissions 
    # @return [SetWebhook200Response]
    def set_chat_permissions(chat_id, permissions, opts = {})
      data, _status_code, _headers = set_chat_permissions_with_http_info(chat_id, permissions, opts)
      data
    end

    # setChatPermissions
    # Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param permissions [ChatPermissions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_independent_chat_permissions 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_permissions_with_http_info(chat_id, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_permissions ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_chat_permissions"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling DefaultApi.set_chat_permissions"
      end
      # resource path
      local_var_path = '/setChatPermissions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'permissions'] = permissions
      query_params[:'use_independent_chat_permissions'] = opts[:'use_independent_chat_permissions'] if !opts[:'use_independent_chat_permissions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatPhoto
    # Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param photo [Object] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_chat_photo(chat_id, photo, opts = {})
      data, _status_code, _headers = set_chat_photo_with_http_info(chat_id, photo, opts)
      data
    end

    # setChatPhoto
    # Use this method to set a new profile photo for the chat. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param photo [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_photo_with_http_info(chat_id, photo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_photo ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_chat_photo"
      end
      # verify the required parameter 'photo' is set
      if @api_client.config.client_side_validation && photo.nil?
        fail ArgumentError, "Missing the required parameter 'photo' when calling DefaultApi.set_chat_photo"
      end
      # resource path
      local_var_path = '/setChatPhoto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'photo'] = photo

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_photo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatStickerSet
    # Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sticker_set_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_chat_sticker_set(chat_id, sticker_set_name, opts = {})
      data, _status_code, _headers = set_chat_sticker_set_with_http_info(chat_id, sticker_set_name, opts)
      data
    end

    # setChatStickerSet
    # Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sticker_set_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_sticker_set_with_http_info(chat_id, sticker_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_sticker_set ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_chat_sticker_set"
      end
      # verify the required parameter 'sticker_set_name' is set
      if @api_client.config.client_side_validation && sticker_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'sticker_set_name' when calling DefaultApi.set_chat_sticker_set"
      end
      # resource path
      local_var_path = '/setChatStickerSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'sticker_set_name'] = sticker_set_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_sticker_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_sticker_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setChatTitle
    # Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param title [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_chat_title(chat_id, title, opts = {})
      data, _status_code, _headers = set_chat_title_with_http_info(chat_id, title, opts)
      data
    end

    # setChatTitle
    # Use this method to change the title of a chat. Titles can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param title [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_chat_title_with_http_info(chat_id, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_chat_title ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_chat_title"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.set_chat_title"
      end
      # resource path
      local_var_path = '/setChatTitle'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'title'] = title

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_chat_title",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_chat_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setCustomEmojiStickerSetThumbnail
    # Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_emoji_id 
    # @return [SetWebhook200Response]
    def set_custom_emoji_sticker_set_thumbnail(name, opts = {})
      data, _status_code, _headers = set_custom_emoji_sticker_set_thumbnail_with_http_info(name, opts)
      data
    end

    # setCustomEmojiStickerSetThumbnail
    # Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_emoji_id 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_custom_emoji_sticker_set_thumbnail_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_custom_emoji_sticker_set_thumbnail ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.set_custom_emoji_sticker_set_thumbnail"
      end
      # resource path
      local_var_path = '/setCustomEmojiStickerSetThumbnail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'custom_emoji_id'] = opts[:'custom_emoji_id'] if !opts[:'custom_emoji_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_custom_emoji_sticker_set_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_custom_emoji_sticker_set_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setGameScore
    # Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.
    # @param user_id [Integer] 
    # @param score [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force 
    # @option opts [Boolean] :disable_edit_message 
    # @option opts [Integer] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @return [EditMessageText200Response]
    def set_game_score(user_id, score, opts = {})
      data, _status_code, _headers = set_game_score_with_http_info(user_id, score, opts)
      data
    end

    # setGameScore
    # Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user&#39;s current score in the chat and force is False.
    # @param user_id [Integer] 
    # @param score [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force 
    # @option opts [Boolean] :disable_edit_message 
    # @option opts [Integer] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def set_game_score_with_http_info(user_id, score, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_game_score ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.set_game_score"
      end
      # verify the required parameter 'score' is set
      if @api_client.config.client_side_validation && score.nil?
        fail ArgumentError, "Missing the required parameter 'score' when calling DefaultApi.set_game_score"
      end
      # resource path
      local_var_path = '/setGameScore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'score'] = score
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'disable_edit_message'] = opts[:'disable_edit_message'] if !opts[:'disable_edit_message'].nil?
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_game_score",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_game_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setMessageReaction
    # Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :reaction 
    # @option opts [Boolean] :is_big 
    # @return [SetWebhook200Response]
    def set_message_reaction(chat_id, message_id, opts = {})
      data, _status_code, _headers = set_message_reaction_with_http_info(chat_id, message_id, opts)
      data
    end

    # setMessageReaction
    # Use this method to change the chosen reactions on a message. Service messages can&#39;t be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :reaction 
    # @option opts [Boolean] :is_big 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_message_reaction_with_http_info(chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_message_reaction ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.set_message_reaction"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.set_message_reaction"
      end
      # resource path
      local_var_path = '/setMessageReaction'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_id'] = message_id
      query_params[:'reaction'] = @api_client.build_collection_param(opts[:'reaction'], :multi) if !opts[:'reaction'].nil?
      query_params[:'is_big'] = opts[:'is_big'] if !opts[:'is_big'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_message_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_message_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setMyCommands
    # Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success.
    # @param commands [Array<BotCommand>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :scope 
    # @option opts [String] :language_code 
    # @return [SetWebhook200Response]
    def set_my_commands(commands, opts = {})
      data, _status_code, _headers = set_my_commands_with_http_info(commands, opts)
      data
    end

    # setMyCommands
    # Use this method to change the list of the bot&#39;s commands. See this manual for more details about bot commands. Returns True on success.
    # @param commands [Array<BotCommand>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :scope 
    # @option opts [String] :language_code 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_my_commands_with_http_info(commands, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_my_commands ...'
      end
      # verify the required parameter 'commands' is set
      if @api_client.config.client_side_validation && commands.nil?
        fail ArgumentError, "Missing the required parameter 'commands' when calling DefaultApi.set_my_commands"
      end
      # resource path
      local_var_path = '/setMyCommands'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'commands'] = @api_client.build_collection_param(commands, :multi)
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_my_commands",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_my_commands\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setMyDefaultAdministratorRights
    # Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [ChatAdministratorRights] :rights 
    # @option opts [Boolean] :for_channels 
    # @return [SetWebhook200Response]
    def set_my_default_administrator_rights(opts = {})
      data, _status_code, _headers = set_my_default_administrator_rights_with_http_info(opts)
      data
    end

    # setMyDefaultAdministratorRights
    # Use this method to change the default administrator rights requested by the bot when it&#39;s added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [ChatAdministratorRights] :rights 
    # @option opts [Boolean] :for_channels 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_my_default_administrator_rights_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_my_default_administrator_rights ...'
      end
      # resource path
      local_var_path = '/setMyDefaultAdministratorRights'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'rights'] = opts[:'rights'] if !opts[:'rights'].nil?
      query_params[:'for_channels'] = opts[:'for_channels'] if !opts[:'for_channels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_my_default_administrator_rights",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_my_default_administrator_rights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setMyDescription
    # Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [String] :language_code 
    # @return [SetWebhook200Response]
    def set_my_description(opts = {})
      data, _status_code, _headers = set_my_description_with_http_info(opts)
      data
    end

    # setMyDescription
    # Use this method to change the bot&#39;s description, which is shown in the chat with the bot if the chat is empty. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [String] :language_code 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_my_description_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_my_description ...'
      end
      # resource path
      local_var_path = '/setMyDescription'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_my_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_my_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setMyName
    # Use this method to change the bot's name. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :language_code 
    # @return [SetWebhook200Response]
    def set_my_name(opts = {})
      data, _status_code, _headers = set_my_name_with_http_info(opts)
      data
    end

    # setMyName
    # Use this method to change the bot&#39;s name. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :language_code 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_my_name_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_my_name ...'
      end
      # resource path
      local_var_path = '/setMyName'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_my_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_my_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setMyShortDescription
    # Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :short_description 
    # @option opts [String] :language_code 
    # @return [SetWebhook200Response]
    def set_my_short_description(opts = {})
      data, _status_code, _headers = set_my_short_description_with_http_info(opts)
      data
    end

    # setMyShortDescription
    # Use this method to change the bot&#39;s short description, which is shown on the bot&#39;s profile page and is sent together with the link when users share the bot. Returns True on success.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :short_description 
    # @option opts [String] :language_code 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_my_short_description_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_my_short_description ...'
      end
      # resource path
      local_var_path = '/setMyShortDescription'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'short_description'] = opts[:'short_description'] if !opts[:'short_description'].nil?
      query_params[:'language_code'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_my_short_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_my_short_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setPassportDataErrors
    # Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    # @param user_id [Integer] 
    # @param errors [Array<Object>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_passport_data_errors(user_id, errors, opts = {})
      data, _status_code, _headers = set_passport_data_errors_with_http_info(user_id, errors, opts)
      data
    end

    # setPassportDataErrors
    # Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn&#39;t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    # @param user_id [Integer] 
    # @param errors [Array<Object>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_passport_data_errors_with_http_info(user_id, errors, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_passport_data_errors ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.set_passport_data_errors"
      end
      # verify the required parameter 'errors' is set
      if @api_client.config.client_side_validation && errors.nil?
        fail ArgumentError, "Missing the required parameter 'errors' when calling DefaultApi.set_passport_data_errors"
      end
      # resource path
      local_var_path = '/setPassportDataErrors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'errors'] = @api_client.build_collection_param(errors, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_passport_data_errors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_passport_data_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setStickerEmojiList
    # Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param emoji_list [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_sticker_emoji_list(sticker, emoji_list, opts = {})
      data, _status_code, _headers = set_sticker_emoji_list_with_http_info(sticker, emoji_list, opts)
      data
    end

    # setStickerEmojiList
    # Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param emoji_list [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_sticker_emoji_list_with_http_info(sticker, emoji_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_sticker_emoji_list ...'
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.set_sticker_emoji_list"
      end
      # verify the required parameter 'emoji_list' is set
      if @api_client.config.client_side_validation && emoji_list.nil?
        fail ArgumentError, "Missing the required parameter 'emoji_list' when calling DefaultApi.set_sticker_emoji_list"
      end
      # resource path
      local_var_path = '/setStickerEmojiList'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sticker'] = sticker
      query_params[:'emoji_list'] = @api_client.build_collection_param(emoji_list, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_sticker_emoji_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_sticker_emoji_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setStickerKeywords
    # Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :keywords 
    # @return [SetWebhook200Response]
    def set_sticker_keywords(sticker, opts = {})
      data, _status_code, _headers = set_sticker_keywords_with_http_info(sticker, opts)
      data
    end

    # setStickerKeywords
    # Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :keywords 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_sticker_keywords_with_http_info(sticker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_sticker_keywords ...'
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.set_sticker_keywords"
      end
      # resource path
      local_var_path = '/setStickerKeywords'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sticker'] = sticker
      query_params[:'keywords'] = @api_client.build_collection_param(opts[:'keywords'], :multi) if !opts[:'keywords'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_sticker_keywords",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_sticker_keywords\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setStickerMaskPosition
    # Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [MaskPosition] :mask_position 
    # @return [SetWebhook200Response]
    def set_sticker_mask_position(sticker, opts = {})
      data, _status_code, _headers = set_sticker_mask_position_with_http_info(sticker, opts)
      data
    end

    # setStickerMaskPosition
    # Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.
    # @param sticker [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [MaskPosition] :mask_position 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_sticker_mask_position_with_http_info(sticker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_sticker_mask_position ...'
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.set_sticker_mask_position"
      end
      # resource path
      local_var_path = '/setStickerMaskPosition'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sticker'] = sticker
      query_params[:'mask_position'] = opts[:'mask_position'] if !opts[:'mask_position'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_sticker_mask_position",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_sticker_mask_position\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setStickerPositionInSet
    # Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.
    # @param sticker [String] 
    # @param position [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_sticker_position_in_set(sticker, position, opts = {})
      data, _status_code, _headers = set_sticker_position_in_set_with_http_info(sticker, position, opts)
      data
    end

    # setStickerPositionInSet
    # Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.
    # @param sticker [String] 
    # @param position [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_sticker_position_in_set_with_http_info(sticker, position, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_sticker_position_in_set ...'
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.set_sticker_position_in_set"
      end
      # verify the required parameter 'position' is set
      if @api_client.config.client_side_validation && position.nil?
        fail ArgumentError, "Missing the required parameter 'position' when calling DefaultApi.set_sticker_position_in_set"
      end
      # resource path
      local_var_path = '/setStickerPositionInSet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sticker'] = sticker
      query_params[:'position'] = position

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_sticker_position_in_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_sticker_position_in_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setStickerSetThumbnail
    # Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.
    # @param name [String] 
    # @param user_id [Integer] 
    # @param format [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @return [SetWebhook200Response]
    def set_sticker_set_thumbnail(name, user_id, format, opts = {})
      data, _status_code, _headers = set_sticker_set_thumbnail_with_http_info(name, user_id, format, opts)
      data
    end

    # setStickerSetThumbnail
    # Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.
    # @param name [String] 
    # @param user_id [Integer] 
    # @param format [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendPhotoPhotoParameterValue>] :thumbnail 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_sticker_set_thumbnail_with_http_info(name, user_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_sticker_set_thumbnail ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.set_sticker_set_thumbnail"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.set_sticker_set_thumbnail"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling DefaultApi.set_sticker_set_thumbnail"
      end
      # resource path
      local_var_path = '/setStickerSetThumbnail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'user_id'] = user_id
      query_params[:'format'] = format
      query_params[:'thumbnail'] = opts[:'thumbnail'] if !opts[:'thumbnail'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_sticker_set_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_sticker_set_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setStickerSetTitle
    # Use this method to set the title of a created sticker set. Returns True on success.
    # @param name [String] 
    # @param title [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def set_sticker_set_title(name, title, opts = {})
      data, _status_code, _headers = set_sticker_set_title_with_http_info(name, title, opts)
      data
    end

    # setStickerSetTitle
    # Use this method to set the title of a created sticker set. Returns True on success.
    # @param name [String] 
    # @param title [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_sticker_set_title_with_http_info(name, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_sticker_set_title ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.set_sticker_set_title"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.set_sticker_set_title"
      end
      # resource path
      local_var_path = '/setStickerSetTitle'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'title'] = title

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_sticker_set_title",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_sticker_set_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # setWebhook
    # Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success. If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header \"X-Telegram-Bot-Api-Secret-Token\" with the secret token as content.
    # @param url [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :certificate 
    # @option opts [String] :ip_address 
    # @option opts [Integer] :max_connections 
    # @option opts [Array<String>] :allowed_updates 
    # @option opts [Boolean] :drop_pending_updates 
    # @option opts [String] :secret_token 
    # @return [SetWebhook200Response]
    def set_webhook(url, opts = {})
      data, _status_code, _headers = set_webhook_with_http_info(url, opts)
      data
    end

    # setWebhook
    # Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success. If you&#39;d like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header \&quot;X-Telegram-Bot-Api-Secret-Token\&quot; with the secret token as content.
    # @param url [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :certificate 
    # @option opts [String] :ip_address 
    # @option opts [Integer] :max_connections 
    # @option opts [Array<String>] :allowed_updates 
    # @option opts [Boolean] :drop_pending_updates 
    # @option opts [String] :secret_token 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def set_webhook_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_webhook ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling DefaultApi.set_webhook"
      end
      # resource path
      local_var_path = '/setWebhook'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'certificate'] = opts[:'certificate'] if !opts[:'certificate'].nil?
      query_params[:'ip_address'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'max_connections'] = opts[:'max_connections'] if !opts[:'max_connections'].nil?
      query_params[:'allowed_updates'] = @api_client.build_collection_param(opts[:'allowed_updates'], :multi) if !opts[:'allowed_updates'].nil?
      query_params[:'drop_pending_updates'] = opts[:'drop_pending_updates'] if !opts[:'drop_pending_updates'].nil?
      query_params[:'secret_token'] = opts[:'secret_token'] if !opts[:'secret_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # stopMessageLiveLocation
    # Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [EditMessageText200Response]
    def stop_message_live_location(opts = {})
      data, _status_code, _headers = stop_message_live_location_with_http_info(opts)
      data
    end

    # stopMessageLiveLocation
    # Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, SendMessageChatIdParameterValue>] :chat_id 
    # @option opts [Integer] :message_id 
    # @option opts [String] :inline_message_id 
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(EditMessageText200Response, Integer, Hash)>] EditMessageText200Response data, response status code and response headers
    def stop_message_live_location_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stop_message_live_location ...'
      end
      # resource path
      local_var_path = '/stopMessageLiveLocation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = opts[:'chat_id'] if !opts[:'chat_id'].nil?
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?
      query_params[:'inline_message_id'] = opts[:'inline_message_id'] if !opts[:'inline_message_id'].nil?
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EditMessageText200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.stop_message_live_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stop_message_live_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # stopPoll
    # Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [StopPoll200Response]
    def stop_poll(chat_id, message_id, opts = {})
      data, _status_code, _headers = stop_poll_with_http_info(chat_id, message_id, opts)
      data
    end

    # stopPoll
    # Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineKeyboardMarkup] :reply_markup 
    # @return [Array<(StopPoll200Response, Integer, Hash)>] StopPoll200Response data, response status code and response headers
    def stop_poll_with_http_info(chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stop_poll ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.stop_poll"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.stop_poll"
      end
      # resource path
      local_var_path = '/stopPoll'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_id'] = message_id
      query_params[:'reply_markup'] = opts[:'reply_markup'] if !opts[:'reply_markup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPoll200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.stop_poll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stop_poll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unbanChatMember
    # Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :only_if_banned 
    # @return [SetWebhook200Response]
    def unban_chat_member(chat_id, user_id, opts = {})
      data, _status_code, _headers = unban_chat_member_with_http_info(chat_id, user_id, opts)
      data
    end

    # unbanChatMember
    # Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don&#39;t want this, use the parameter only_if_banned. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :only_if_banned 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unban_chat_member_with_http_info(chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unban_chat_member ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unban_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.unban_chat_member"
      end
      # resource path
      local_var_path = '/unbanChatMember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id
      query_params[:'only_if_banned'] = opts[:'only_if_banned'] if !opts[:'only_if_banned'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unban_chat_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unban_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unbanChatSenderChat
    # Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sender_chat_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def unban_chat_sender_chat(chat_id, sender_chat_id, opts = {})
      data, _status_code, _headers = unban_chat_sender_chat_with_http_info(chat_id, sender_chat_id, opts)
      data
    end

    # unbanChatSenderChat
    # Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param sender_chat_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unban_chat_sender_chat_with_http_info(chat_id, sender_chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unban_chat_sender_chat ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unban_chat_sender_chat"
      end
      # verify the required parameter 'sender_chat_id' is set
      if @api_client.config.client_side_validation && sender_chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_chat_id' when calling DefaultApi.unban_chat_sender_chat"
      end
      # resource path
      local_var_path = '/unbanChatSenderChat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'sender_chat_id'] = sender_chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unban_chat_sender_chat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unban_chat_sender_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unhideGeneralForumTopic
    # Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def unhide_general_forum_topic(chat_id, opts = {})
      data, _status_code, _headers = unhide_general_forum_topic_with_http_info(chat_id, opts)
      data
    end

    # unhideGeneralForumTopic
    # Use this method to unhide the &#39;General&#39; topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unhide_general_forum_topic_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unhide_general_forum_topic ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unhide_general_forum_topic"
      end
      # resource path
      local_var_path = '/unhideGeneralForumTopic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unhide_general_forum_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unhide_general_forum_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unpinAllChatMessages
    # Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def unpin_all_chat_messages(chat_id, opts = {})
      data, _status_code, _headers = unpin_all_chat_messages_with_http_info(chat_id, opts)
      data
    end

    # unpinAllChatMessages
    # Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can_pin_messages&#39; administrator right in a supergroup or &#39;can_edit_messages&#39; administrator right in a channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unpin_all_chat_messages_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unpin_all_chat_messages ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unpin_all_chat_messages"
      end
      # resource path
      local_var_path = '/unpinAllChatMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unpin_all_chat_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unpin_all_chat_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unpinAllForumTopicMessages
    # Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def unpin_all_forum_topic_messages(chat_id, message_thread_id, opts = {})
      data, _status_code, _headers = unpin_all_forum_topic_messages_with_http_info(chat_id, message_thread_id, opts)
      data
    end

    # unpinAllForumTopicMessages
    # Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param message_thread_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unpin_all_forum_topic_messages_with_http_info(chat_id, message_thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unpin_all_forum_topic_messages ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unpin_all_forum_topic_messages"
      end
      # verify the required parameter 'message_thread_id' is set
      if @api_client.config.client_side_validation && message_thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_id' when calling DefaultApi.unpin_all_forum_topic_messages"
      end
      # resource path
      local_var_path = '/unpinAllForumTopicMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_thread_id'] = message_thread_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unpin_all_forum_topic_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unpin_all_forum_topic_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unpinAllGeneralForumTopicMessages
    # Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [SetWebhook200Response]
    def unpin_all_general_forum_topic_messages(chat_id, opts = {})
      data, _status_code, _headers = unpin_all_general_forum_topic_messages_with_http_info(chat_id, opts)
      data
    end

    # unpinAllGeneralForumTopicMessages
    # Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unpin_all_general_forum_topic_messages_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unpin_all_general_forum_topic_messages ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unpin_all_general_forum_topic_messages"
      end
      # resource path
      local_var_path = '/unpinAllGeneralForumTopicMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unpin_all_general_forum_topic_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unpin_all_general_forum_topic_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unpinChatMessage
    # Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_id 
    # @return [SetWebhook200Response]
    def unpin_chat_message(chat_id, opts = {})
      data, _status_code, _headers = unpin_chat_message_with_http_info(chat_id, opts)
      data
    end

    # unpinChatMessage
    # Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can_pin_messages&#39; administrator right in a supergroup or &#39;can_edit_messages&#39; administrator right in a channel. Returns True on success.
    # @param chat_id [Hash<String, SendMessageChatIdParameterValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :message_id 
    # @return [Array<(SetWebhook200Response, Integer, Hash)>] SetWebhook200Response data, response status code and response headers
    def unpin_chat_message_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unpin_chat_message ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling DefaultApi.unpin_chat_message"
      end
      # resource path
      local_var_path = '/unpinChatMessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_id'] = opts[:'message_id'] if !opts[:'message_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetWebhook200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.unpin_chat_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unpin_chat_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # uploadStickerFile
    # Use this method to upload a file with a sticker for later use in the createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file can be used multiple times). Returns the uploaded File on success.
    # @param user_id [Integer] 
    # @param sticker [Object] 
    # @param sticker_format [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetFile200Response]
    def upload_sticker_file(user_id, sticker, sticker_format, opts = {})
      data, _status_code, _headers = upload_sticker_file_with_http_info(user_id, sticker, sticker_format, opts)
      data
    end

    # uploadStickerFile
    # Use this method to upload a file with a sticker for later use in the createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file can be used multiple times). Returns the uploaded File on success.
    # @param user_id [Integer] 
    # @param sticker [Object] 
    # @param sticker_format [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFile200Response, Integer, Hash)>] GetFile200Response data, response status code and response headers
    def upload_sticker_file_with_http_info(user_id, sticker, sticker_format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_sticker_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.upload_sticker_file"
      end
      # verify the required parameter 'sticker' is set
      if @api_client.config.client_side_validation && sticker.nil?
        fail ArgumentError, "Missing the required parameter 'sticker' when calling DefaultApi.upload_sticker_file"
      end
      # verify the required parameter 'sticker_format' is set
      if @api_client.config.client_side_validation && sticker_format.nil?
        fail ArgumentError, "Missing the required parameter 'sticker_format' when calling DefaultApi.upload_sticker_file"
      end
      # resource path
      local_var_path = '/uploadStickerFile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'sticker'] = sticker
      query_params[:'sticker_format'] = sticker_format

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFile200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.upload_sticker_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_sticker_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
