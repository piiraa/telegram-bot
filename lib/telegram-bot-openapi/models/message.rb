=begin
#telegram-bot-api

#Unofficial telegram-bot-api OpenAPI spec. Generated from the Bot API docs at https://core.telegram.org/bots/api

The version of the OpenAPI document: Bot API 7.2

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module TelegramBotOpenapi
  # This object represents a message.
  class Message
    # Unique message identifier inside this chat
    attr_accessor :message_id

    # Optional. Unique identifier of a message thread to which the message belongs; for supergroups only
    attr_accessor :message_thread_id

    # Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat.
    attr_accessor :from

    # Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel posts, the supergroup itself for messages from anonymous group administrators, the linked channel for messages automatically forwarded to the discussion group. For backward compatibility, the field from contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat.
    attr_accessor :sender_chat

    # Optional. If the sender of the message boosted the chat, the number of boosts added by the user
    attr_accessor :sender_boost_count

    # Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.
    attr_accessor :sender_business_bot

    # Date the message was sent in Unix time. It is always a positive number, representing a valid date.
    attr_accessor :date

    # Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.
    attr_accessor :business_connection_id

    # Chat the message belongs to
    attr_accessor :chat

    # Optional. Information about the original message for forwarded messages
    attr_accessor :forward_origin

    # Optional. True, if the message is sent to a forum topic
    attr_accessor :is_topic_message

    # Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group
    attr_accessor :is_automatic_forward

    # Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
    attr_accessor :reply_to_message

    # Optional. Information about the message that is being replied to, which may come from another chat or forum topic
    attr_accessor :external_reply

    # Optional. For replies that quote part of the original message, the quoted part of the message
    attr_accessor :quote

    # Optional. For replies to a story, the original story
    attr_accessor :reply_to_story

    # Optional. Bot through which the message was sent
    attr_accessor :via_bot

    # Optional. Date the message was last edited in Unix time
    attr_accessor :edit_date

    # Optional. True, if the message can't be forwarded
    attr_accessor :has_protected_content

    # Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message
    attr_accessor :is_from_offline

    # Optional. The unique identifier of a media message group this message belongs to
    attr_accessor :media_group_id

    # Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
    attr_accessor :author_signature

    # Optional. For text messages, the actual UTF-8 text of the message
    attr_accessor :text

    # Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
    attr_accessor :entities

    # Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed
    attr_accessor :link_preview_options

    # Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
    attr_accessor :animation

    # Optional. Message is an audio file, information about the file
    attr_accessor :audio

    # Optional. Message is a general file, information about the file
    attr_accessor :document

    # Optional. Message is a photo, available sizes of the photo
    attr_accessor :photo

    # Optional. Message is a sticker, information about the sticker
    attr_accessor :sticker

    # Optional. Message is a forwarded story
    attr_accessor :story

    # Optional. Message is a video, information about the video
    attr_accessor :video

    # Optional. Message is a video note, information about the video message
    attr_accessor :video_note

    # Optional. Message is a voice message, information about the file
    attr_accessor :voice

    # Optional. Caption for the animation, audio, document, photo, video or voice
    attr_accessor :caption

    # Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
    attr_accessor :caption_entities

    # Optional. True, if the message media is covered by a spoiler animation
    attr_accessor :has_media_spoiler

    # Optional. Message is a shared contact, information about the contact
    attr_accessor :contact

    # Optional. Message is a dice with random value
    attr_accessor :dice

    # Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games
    attr_accessor :game

    # Optional. Message is a native poll, information about the poll
    attr_accessor :poll

    # Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
    attr_accessor :venue

    # Optional. Message is a shared location, information about the location
    attr_accessor :location

    # Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
    attr_accessor :new_chat_members

    # Optional. A member was removed from the group, information about them (this member may be the bot itself)
    attr_accessor :left_chat_member

    # Optional. A chat title was changed to this value
    attr_accessor :new_chat_title

    # Optional. A chat photo was change to this value
    attr_accessor :new_chat_photo

    # Optional. Service message: the chat photo was deleted
    attr_accessor :delete_chat_photo

    # Optional. Service message: the group has been created
    attr_accessor :group_chat_created

    # Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.
    attr_accessor :supergroup_chat_created

    # Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.
    attr_accessor :channel_chat_created

    # Optional. Service message: auto-delete timer settings changed in the chat
    attr_accessor :message_auto_delete_timer_changed

    # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    attr_accessor :migrate_to_chat_id

    # Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    attr_accessor :migrate_from_chat_id

    # Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
    attr_accessor :pinned_message

    # Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments
    attr_accessor :invoice

    # Optional. Message is a service message about a successful payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments
    attr_accessor :successful_payment

    # Optional. Service message: users were shared with the bot
    attr_accessor :users_shared

    # Optional. Service message: a chat was shared with the bot
    attr_accessor :chat_shared

    # Optional. The domain name of the website on which the user has logged in. More about Telegram Login: https://core.telegram.org/widgets/login
    attr_accessor :connected_website

    # Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess
    attr_accessor :write_access_allowed

    # Optional. Telegram Passport data
    attr_accessor :passport_data

    # Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.
    attr_accessor :proximity_alert_triggered

    # Optional. Service message: user boosted the chat
    attr_accessor :boost_added

    # Optional. Service message: forum topic created
    attr_accessor :forum_topic_created

    # Optional. Service message: forum topic edited
    attr_accessor :forum_topic_edited

    # Optional. Service message: forum topic closed
    attr_accessor :forum_topic_closed

    # Optional. Service message: forum topic reopened
    attr_accessor :forum_topic_reopened

    # Optional. Service message: the 'General' forum topic hidden
    attr_accessor :general_forum_topic_hidden

    # Optional. Service message: the 'General' forum topic unhidden
    attr_accessor :general_forum_topic_unhidden

    # Optional. Service message: a scheduled giveaway was created
    attr_accessor :giveaway_created

    # Optional. The message is a scheduled giveaway message
    attr_accessor :giveaway

    # Optional. A giveaway with public winners was completed
    attr_accessor :giveaway_winners

    # Optional. Service message: a giveaway without public winners was completed
    attr_accessor :giveaway_completed

    # Optional. Service message: video chat scheduled
    attr_accessor :video_chat_scheduled

    # Optional. Service message: video chat started
    attr_accessor :video_chat_started

    # Optional. Service message: video chat ended
    attr_accessor :video_chat_ended

    # Optional. Service message: new participants invited to a video chat
    attr_accessor :video_chat_participants_invited

    # Optional. Service message: data sent by a Web App
    attr_accessor :web_app_data

    # Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
    attr_accessor :reply_markup

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'message_id' => :'message_id',
        :'message_thread_id' => :'message_thread_id',
        :'from' => :'from',
        :'sender_chat' => :'sender_chat',
        :'sender_boost_count' => :'sender_boost_count',
        :'sender_business_bot' => :'sender_business_bot',
        :'date' => :'date',
        :'business_connection_id' => :'business_connection_id',
        :'chat' => :'chat',
        :'forward_origin' => :'forward_origin',
        :'is_topic_message' => :'is_topic_message',
        :'is_automatic_forward' => :'is_automatic_forward',
        :'reply_to_message' => :'reply_to_message',
        :'external_reply' => :'external_reply',
        :'quote' => :'quote',
        :'reply_to_story' => :'reply_to_story',
        :'via_bot' => :'via_bot',
        :'edit_date' => :'edit_date',
        :'has_protected_content' => :'has_protected_content',
        :'is_from_offline' => :'is_from_offline',
        :'media_group_id' => :'media_group_id',
        :'author_signature' => :'author_signature',
        :'text' => :'text',
        :'entities' => :'entities',
        :'link_preview_options' => :'link_preview_options',
        :'animation' => :'animation',
        :'audio' => :'audio',
        :'document' => :'document',
        :'photo' => :'photo',
        :'sticker' => :'sticker',
        :'story' => :'story',
        :'video' => :'video',
        :'video_note' => :'video_note',
        :'voice' => :'voice',
        :'caption' => :'caption',
        :'caption_entities' => :'caption_entities',
        :'has_media_spoiler' => :'has_media_spoiler',
        :'contact' => :'contact',
        :'dice' => :'dice',
        :'game' => :'game',
        :'poll' => :'poll',
        :'venue' => :'venue',
        :'location' => :'location',
        :'new_chat_members' => :'new_chat_members',
        :'left_chat_member' => :'left_chat_member',
        :'new_chat_title' => :'new_chat_title',
        :'new_chat_photo' => :'new_chat_photo',
        :'delete_chat_photo' => :'delete_chat_photo',
        :'group_chat_created' => :'group_chat_created',
        :'supergroup_chat_created' => :'supergroup_chat_created',
        :'channel_chat_created' => :'channel_chat_created',
        :'message_auto_delete_timer_changed' => :'message_auto_delete_timer_changed',
        :'migrate_to_chat_id' => :'migrate_to_chat_id',
        :'migrate_from_chat_id' => :'migrate_from_chat_id',
        :'pinned_message' => :'pinned_message',
        :'invoice' => :'invoice',
        :'successful_payment' => :'successful_payment',
        :'users_shared' => :'users_shared',
        :'chat_shared' => :'chat_shared',
        :'connected_website' => :'connected_website',
        :'write_access_allowed' => :'write_access_allowed',
        :'passport_data' => :'passport_data',
        :'proximity_alert_triggered' => :'proximity_alert_triggered',
        :'boost_added' => :'boost_added',
        :'forum_topic_created' => :'forum_topic_created',
        :'forum_topic_edited' => :'forum_topic_edited',
        :'forum_topic_closed' => :'forum_topic_closed',
        :'forum_topic_reopened' => :'forum_topic_reopened',
        :'general_forum_topic_hidden' => :'general_forum_topic_hidden',
        :'general_forum_topic_unhidden' => :'general_forum_topic_unhidden',
        :'giveaway_created' => :'giveaway_created',
        :'giveaway' => :'giveaway',
        :'giveaway_winners' => :'giveaway_winners',
        :'giveaway_completed' => :'giveaway_completed',
        :'video_chat_scheduled' => :'video_chat_scheduled',
        :'video_chat_started' => :'video_chat_started',
        :'video_chat_ended' => :'video_chat_ended',
        :'video_chat_participants_invited' => :'video_chat_participants_invited',
        :'web_app_data' => :'web_app_data',
        :'reply_markup' => :'reply_markup'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'message_id' => :'Integer',
        :'message_thread_id' => :'Integer',
        :'from' => :'User',
        :'sender_chat' => :'Chat',
        :'sender_boost_count' => :'Integer',
        :'sender_business_bot' => :'User',
        :'date' => :'Integer',
        :'business_connection_id' => :'String',
        :'chat' => :'Chat',
        :'forward_origin' => :'Object',
        :'is_topic_message' => :'Boolean',
        :'is_automatic_forward' => :'Boolean',
        :'reply_to_message' => :'Message',
        :'external_reply' => :'ExternalReplyInfo',
        :'quote' => :'TextQuote',
        :'reply_to_story' => :'Story',
        :'via_bot' => :'User',
        :'edit_date' => :'Integer',
        :'has_protected_content' => :'Boolean',
        :'is_from_offline' => :'Boolean',
        :'media_group_id' => :'String',
        :'author_signature' => :'String',
        :'text' => :'String',
        :'entities' => :'Array<MessageEntity>',
        :'link_preview_options' => :'LinkPreviewOptions',
        :'animation' => :'Animation',
        :'audio' => :'Audio',
        :'document' => :'Document',
        :'photo' => :'Array<PhotoSize>',
        :'sticker' => :'Sticker',
        :'story' => :'Story',
        :'video' => :'Video',
        :'video_note' => :'VideoNote',
        :'voice' => :'Voice',
        :'caption' => :'String',
        :'caption_entities' => :'Array<MessageEntity>',
        :'has_media_spoiler' => :'Boolean',
        :'contact' => :'Contact',
        :'dice' => :'Dice',
        :'game' => :'Game',
        :'poll' => :'Poll',
        :'venue' => :'Venue',
        :'location' => :'Location',
        :'new_chat_members' => :'Array<User>',
        :'left_chat_member' => :'User',
        :'new_chat_title' => :'String',
        :'new_chat_photo' => :'Array<PhotoSize>',
        :'delete_chat_photo' => :'Boolean',
        :'group_chat_created' => :'Boolean',
        :'supergroup_chat_created' => :'Boolean',
        :'channel_chat_created' => :'Boolean',
        :'message_auto_delete_timer_changed' => :'MessageAutoDeleteTimerChanged',
        :'migrate_to_chat_id' => :'Integer',
        :'migrate_from_chat_id' => :'Integer',
        :'pinned_message' => :'Object',
        :'invoice' => :'Invoice',
        :'successful_payment' => :'SuccessfulPayment',
        :'users_shared' => :'UsersShared',
        :'chat_shared' => :'ChatShared',
        :'connected_website' => :'String',
        :'write_access_allowed' => :'WriteAccessAllowed',
        :'passport_data' => :'PassportData',
        :'proximity_alert_triggered' => :'ProximityAlertTriggered',
        :'boost_added' => :'ChatBoostAdded',
        :'forum_topic_created' => :'ForumTopicCreated',
        :'forum_topic_edited' => :'ForumTopicEdited',
        :'forum_topic_closed' => :'Object',
        :'forum_topic_reopened' => :'Object',
        :'general_forum_topic_hidden' => :'Object',
        :'general_forum_topic_unhidden' => :'Object',
        :'giveaway_created' => :'Object',
        :'giveaway' => :'Giveaway',
        :'giveaway_winners' => :'GiveawayWinners',
        :'giveaway_completed' => :'GiveawayCompleted',
        :'video_chat_scheduled' => :'VideoChatScheduled',
        :'video_chat_started' => :'Object',
        :'video_chat_ended' => :'VideoChatEnded',
        :'video_chat_participants_invited' => :'VideoChatParticipantsInvited',
        :'web_app_data' => :'WebAppData',
        :'reply_markup' => :'InlineKeyboardMarkup'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TelegramBotOpenapi::Message` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TelegramBotOpenapi::Message`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'message_id')
        self.message_id = attributes[:'message_id']
      else
        self.message_id = nil
      end

      if attributes.key?(:'message_thread_id')
        self.message_thread_id = attributes[:'message_thread_id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'sender_chat')
        self.sender_chat = attributes[:'sender_chat']
      end

      if attributes.key?(:'sender_boost_count')
        self.sender_boost_count = attributes[:'sender_boost_count']
      end

      if attributes.key?(:'sender_business_bot')
        self.sender_business_bot = attributes[:'sender_business_bot']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      else
        self.date = nil
      end

      if attributes.key?(:'business_connection_id')
        self.business_connection_id = attributes[:'business_connection_id']
      end

      if attributes.key?(:'chat')
        self.chat = attributes[:'chat']
      else
        self.chat = nil
      end

      if attributes.key?(:'forward_origin')
        self.forward_origin = attributes[:'forward_origin']
      end

      if attributes.key?(:'is_topic_message')
        self.is_topic_message = attributes[:'is_topic_message']
      end

      if attributes.key?(:'is_automatic_forward')
        self.is_automatic_forward = attributes[:'is_automatic_forward']
      end

      if attributes.key?(:'reply_to_message')
        self.reply_to_message = attributes[:'reply_to_message']
      end

      if attributes.key?(:'external_reply')
        self.external_reply = attributes[:'external_reply']
      end

      if attributes.key?(:'quote')
        self.quote = attributes[:'quote']
      end

      if attributes.key?(:'reply_to_story')
        self.reply_to_story = attributes[:'reply_to_story']
      end

      if attributes.key?(:'via_bot')
        self.via_bot = attributes[:'via_bot']
      end

      if attributes.key?(:'edit_date')
        self.edit_date = attributes[:'edit_date']
      end

      if attributes.key?(:'has_protected_content')
        self.has_protected_content = attributes[:'has_protected_content']
      end

      if attributes.key?(:'is_from_offline')
        self.is_from_offline = attributes[:'is_from_offline']
      end

      if attributes.key?(:'media_group_id')
        self.media_group_id = attributes[:'media_group_id']
      end

      if attributes.key?(:'author_signature')
        self.author_signature = attributes[:'author_signature']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'entities')
        if (value = attributes[:'entities']).is_a?(Array)
          self.entities = value
        end
      end

      if attributes.key?(:'link_preview_options')
        self.link_preview_options = attributes[:'link_preview_options']
      end

      if attributes.key?(:'animation')
        self.animation = attributes[:'animation']
      end

      if attributes.key?(:'audio')
        self.audio = attributes[:'audio']
      end

      if attributes.key?(:'document')
        self.document = attributes[:'document']
      end

      if attributes.key?(:'photo')
        if (value = attributes[:'photo']).is_a?(Array)
          self.photo = value
        end
      end

      if attributes.key?(:'sticker')
        self.sticker = attributes[:'sticker']
      end

      if attributes.key?(:'story')
        self.story = attributes[:'story']
      end

      if attributes.key?(:'video')
        self.video = attributes[:'video']
      end

      if attributes.key?(:'video_note')
        self.video_note = attributes[:'video_note']
      end

      if attributes.key?(:'voice')
        self.voice = attributes[:'voice']
      end

      if attributes.key?(:'caption')
        self.caption = attributes[:'caption']
      end

      if attributes.key?(:'caption_entities')
        if (value = attributes[:'caption_entities']).is_a?(Array)
          self.caption_entities = value
        end
      end

      if attributes.key?(:'has_media_spoiler')
        self.has_media_spoiler = attributes[:'has_media_spoiler']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'dice')
        self.dice = attributes[:'dice']
      end

      if attributes.key?(:'game')
        self.game = attributes[:'game']
      end

      if attributes.key?(:'poll')
        self.poll = attributes[:'poll']
      end

      if attributes.key?(:'venue')
        self.venue = attributes[:'venue']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'new_chat_members')
        if (value = attributes[:'new_chat_members']).is_a?(Array)
          self.new_chat_members = value
        end
      end

      if attributes.key?(:'left_chat_member')
        self.left_chat_member = attributes[:'left_chat_member']
      end

      if attributes.key?(:'new_chat_title')
        self.new_chat_title = attributes[:'new_chat_title']
      end

      if attributes.key?(:'new_chat_photo')
        if (value = attributes[:'new_chat_photo']).is_a?(Array)
          self.new_chat_photo = value
        end
      end

      if attributes.key?(:'delete_chat_photo')
        self.delete_chat_photo = attributes[:'delete_chat_photo']
      end

      if attributes.key?(:'group_chat_created')
        self.group_chat_created = attributes[:'group_chat_created']
      end

      if attributes.key?(:'supergroup_chat_created')
        self.supergroup_chat_created = attributes[:'supergroup_chat_created']
      end

      if attributes.key?(:'channel_chat_created')
        self.channel_chat_created = attributes[:'channel_chat_created']
      end

      if attributes.key?(:'message_auto_delete_timer_changed')
        self.message_auto_delete_timer_changed = attributes[:'message_auto_delete_timer_changed']
      end

      if attributes.key?(:'migrate_to_chat_id')
        self.migrate_to_chat_id = attributes[:'migrate_to_chat_id']
      end

      if attributes.key?(:'migrate_from_chat_id')
        self.migrate_from_chat_id = attributes[:'migrate_from_chat_id']
      end

      if attributes.key?(:'pinned_message')
        self.pinned_message = attributes[:'pinned_message']
      end

      if attributes.key?(:'invoice')
        self.invoice = attributes[:'invoice']
      end

      if attributes.key?(:'successful_payment')
        self.successful_payment = attributes[:'successful_payment']
      end

      if attributes.key?(:'users_shared')
        self.users_shared = attributes[:'users_shared']
      end

      if attributes.key?(:'chat_shared')
        self.chat_shared = attributes[:'chat_shared']
      end

      if attributes.key?(:'connected_website')
        self.connected_website = attributes[:'connected_website']
      end

      if attributes.key?(:'write_access_allowed')
        self.write_access_allowed = attributes[:'write_access_allowed']
      end

      if attributes.key?(:'passport_data')
        self.passport_data = attributes[:'passport_data']
      end

      if attributes.key?(:'proximity_alert_triggered')
        self.proximity_alert_triggered = attributes[:'proximity_alert_triggered']
      end

      if attributes.key?(:'boost_added')
        self.boost_added = attributes[:'boost_added']
      end

      if attributes.key?(:'forum_topic_created')
        self.forum_topic_created = attributes[:'forum_topic_created']
      end

      if attributes.key?(:'forum_topic_edited')
        self.forum_topic_edited = attributes[:'forum_topic_edited']
      end

      if attributes.key?(:'forum_topic_closed')
        self.forum_topic_closed = attributes[:'forum_topic_closed']
      end

      if attributes.key?(:'forum_topic_reopened')
        self.forum_topic_reopened = attributes[:'forum_topic_reopened']
      end

      if attributes.key?(:'general_forum_topic_hidden')
        self.general_forum_topic_hidden = attributes[:'general_forum_topic_hidden']
      end

      if attributes.key?(:'general_forum_topic_unhidden')
        self.general_forum_topic_unhidden = attributes[:'general_forum_topic_unhidden']
      end

      if attributes.key?(:'giveaway_created')
        self.giveaway_created = attributes[:'giveaway_created']
      end

      if attributes.key?(:'giveaway')
        self.giveaway = attributes[:'giveaway']
      end

      if attributes.key?(:'giveaway_winners')
        self.giveaway_winners = attributes[:'giveaway_winners']
      end

      if attributes.key?(:'giveaway_completed')
        self.giveaway_completed = attributes[:'giveaway_completed']
      end

      if attributes.key?(:'video_chat_scheduled')
        self.video_chat_scheduled = attributes[:'video_chat_scheduled']
      end

      if attributes.key?(:'video_chat_started')
        self.video_chat_started = attributes[:'video_chat_started']
      end

      if attributes.key?(:'video_chat_ended')
        self.video_chat_ended = attributes[:'video_chat_ended']
      end

      if attributes.key?(:'video_chat_participants_invited')
        self.video_chat_participants_invited = attributes[:'video_chat_participants_invited']
      end

      if attributes.key?(:'web_app_data')
        self.web_app_data = attributes[:'web_app_data']
      end

      if attributes.key?(:'reply_markup')
        self.reply_markup = attributes[:'reply_markup']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @message_id.nil?
        invalid_properties.push('invalid value for "message_id", message_id cannot be nil.')
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @chat.nil?
        invalid_properties.push('invalid value for "chat", chat cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @message_id.nil?
      return false if @date.nil?
      return false if @chat.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          message_id == o.message_id &&
          message_thread_id == o.message_thread_id &&
          from == o.from &&
          sender_chat == o.sender_chat &&
          sender_boost_count == o.sender_boost_count &&
          sender_business_bot == o.sender_business_bot &&
          date == o.date &&
          business_connection_id == o.business_connection_id &&
          chat == o.chat &&
          forward_origin == o.forward_origin &&
          is_topic_message == o.is_topic_message &&
          is_automatic_forward == o.is_automatic_forward &&
          reply_to_message == o.reply_to_message &&
          external_reply == o.external_reply &&
          quote == o.quote &&
          reply_to_story == o.reply_to_story &&
          via_bot == o.via_bot &&
          edit_date == o.edit_date &&
          has_protected_content == o.has_protected_content &&
          is_from_offline == o.is_from_offline &&
          media_group_id == o.media_group_id &&
          author_signature == o.author_signature &&
          text == o.text &&
          entities == o.entities &&
          link_preview_options == o.link_preview_options &&
          animation == o.animation &&
          audio == o.audio &&
          document == o.document &&
          photo == o.photo &&
          sticker == o.sticker &&
          story == o.story &&
          video == o.video &&
          video_note == o.video_note &&
          voice == o.voice &&
          caption == o.caption &&
          caption_entities == o.caption_entities &&
          has_media_spoiler == o.has_media_spoiler &&
          contact == o.contact &&
          dice == o.dice &&
          game == o.game &&
          poll == o.poll &&
          venue == o.venue &&
          location == o.location &&
          new_chat_members == o.new_chat_members &&
          left_chat_member == o.left_chat_member &&
          new_chat_title == o.new_chat_title &&
          new_chat_photo == o.new_chat_photo &&
          delete_chat_photo == o.delete_chat_photo &&
          group_chat_created == o.group_chat_created &&
          supergroup_chat_created == o.supergroup_chat_created &&
          channel_chat_created == o.channel_chat_created &&
          message_auto_delete_timer_changed == o.message_auto_delete_timer_changed &&
          migrate_to_chat_id == o.migrate_to_chat_id &&
          migrate_from_chat_id == o.migrate_from_chat_id &&
          pinned_message == o.pinned_message &&
          invoice == o.invoice &&
          successful_payment == o.successful_payment &&
          users_shared == o.users_shared &&
          chat_shared == o.chat_shared &&
          connected_website == o.connected_website &&
          write_access_allowed == o.write_access_allowed &&
          passport_data == o.passport_data &&
          proximity_alert_triggered == o.proximity_alert_triggered &&
          boost_added == o.boost_added &&
          forum_topic_created == o.forum_topic_created &&
          forum_topic_edited == o.forum_topic_edited &&
          forum_topic_closed == o.forum_topic_closed &&
          forum_topic_reopened == o.forum_topic_reopened &&
          general_forum_topic_hidden == o.general_forum_topic_hidden &&
          general_forum_topic_unhidden == o.general_forum_topic_unhidden &&
          giveaway_created == o.giveaway_created &&
          giveaway == o.giveaway &&
          giveaway_winners == o.giveaway_winners &&
          giveaway_completed == o.giveaway_completed &&
          video_chat_scheduled == o.video_chat_scheduled &&
          video_chat_started == o.video_chat_started &&
          video_chat_ended == o.video_chat_ended &&
          video_chat_participants_invited == o.video_chat_participants_invited &&
          web_app_data == o.web_app_data &&
          reply_markup == o.reply_markup
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [message_id, message_thread_id, from, sender_chat, sender_boost_count, sender_business_bot, date, business_connection_id, chat, forward_origin, is_topic_message, is_automatic_forward, reply_to_message, external_reply, quote, reply_to_story, via_bot, edit_date, has_protected_content, is_from_offline, media_group_id, author_signature, text, entities, link_preview_options, animation, audio, document, photo, sticker, story, video, video_note, voice, caption, caption_entities, has_media_spoiler, contact, dice, game, poll, venue, location, new_chat_members, left_chat_member, new_chat_title, new_chat_photo, delete_chat_photo, group_chat_created, supergroup_chat_created, channel_chat_created, message_auto_delete_timer_changed, migrate_to_chat_id, migrate_from_chat_id, pinned_message, invoice, successful_payment, users_shared, chat_shared, connected_website, write_access_allowed, passport_data, proximity_alert_triggered, boost_added, forum_topic_created, forum_topic_edited, forum_topic_closed, forum_topic_reopened, general_forum_topic_hidden, general_forum_topic_unhidden, giveaway_created, giveaway, giveaway_winners, giveaway_completed, video_chat_scheduled, video_chat_started, video_chat_ended, video_chat_participants_invited, web_app_data, reply_markup].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TelegramBotOpenapi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
