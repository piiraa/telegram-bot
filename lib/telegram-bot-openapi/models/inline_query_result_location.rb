=begin
#telegram-bot-api

#Unofficial telegram-bot-api OpenAPI spec. Generated from the Bot API docs at https://core.telegram.org/bots/api

The version of the OpenAPI document: Bot API 7.2

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module TelegramBotOpenapi
  # Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
  class InlineQueryResultLocation
    # Type of the result, must be location
    attr_accessor :type

    # Unique identifier for this result, 1-64 Bytes
    attr_accessor :id

    # Location latitude in degrees
    attr_accessor :latitude

    # Location longitude in degrees
    attr_accessor :longitude

    # Location title
    attr_accessor :title

    # Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    attr_accessor :horizontal_accuracy

    # Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
    attr_accessor :live_period

    # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    attr_accessor :heading

    # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
    attr_accessor :proximity_alert_radius

    # Optional. Inline keyboard attached to the message
    attr_accessor :reply_markup

    # Optional. Content of the message to be sent instead of the location
    attr_accessor :input_message_content

    # Optional. Url of the thumbnail for the result
    attr_accessor :thumbnail_url

    # Optional. Thumbnail width
    attr_accessor :thumbnail_width

    # Optional. Thumbnail height
    attr_accessor :thumbnail_height

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'id' => :'id',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'title' => :'title',
        :'horizontal_accuracy' => :'horizontal_accuracy',
        :'live_period' => :'live_period',
        :'heading' => :'heading',
        :'proximity_alert_radius' => :'proximity_alert_radius',
        :'reply_markup' => :'reply_markup',
        :'input_message_content' => :'input_message_content',
        :'thumbnail_url' => :'thumbnail_url',
        :'thumbnail_width' => :'thumbnail_width',
        :'thumbnail_height' => :'thumbnail_height'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'id' => :'String',
        :'latitude' => :'Float',
        :'longitude' => :'Float',
        :'title' => :'String',
        :'horizontal_accuracy' => :'Float',
        :'live_period' => :'Integer',
        :'heading' => :'Integer',
        :'proximity_alert_radius' => :'Integer',
        :'reply_markup' => :'InlineKeyboardMarkup',
        :'input_message_content' => :'Object',
        :'thumbnail_url' => :'String',
        :'thumbnail_width' => :'Integer',
        :'thumbnail_height' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TelegramBotOpenapi::InlineQueryResultLocation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TelegramBotOpenapi::InlineQueryResultLocation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      else
        self.latitude = nil
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      else
        self.longitude = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end

      if attributes.key?(:'horizontal_accuracy')
        self.horizontal_accuracy = attributes[:'horizontal_accuracy']
      end

      if attributes.key?(:'live_period')
        self.live_period = attributes[:'live_period']
      end

      if attributes.key?(:'heading')
        self.heading = attributes[:'heading']
      end

      if attributes.key?(:'proximity_alert_radius')
        self.proximity_alert_radius = attributes[:'proximity_alert_radius']
      end

      if attributes.key?(:'reply_markup')
        self.reply_markup = attributes[:'reply_markup']
      end

      if attributes.key?(:'input_message_content')
        self.input_message_content = attributes[:'input_message_content']
      end

      if attributes.key?(:'thumbnail_url')
        self.thumbnail_url = attributes[:'thumbnail_url']
      end

      if attributes.key?(:'thumbnail_width')
        self.thumbnail_width = attributes[:'thumbnail_width']
      end

      if attributes.key?(:'thumbnail_height')
        self.thumbnail_height = attributes[:'thumbnail_height']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @latitude.nil?
        invalid_properties.push('invalid value for "latitude", latitude cannot be nil.')
      end

      if @longitude.nil?
        invalid_properties.push('invalid value for "longitude", longitude cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @type.nil?
      return false if @id.nil?
      return false if @latitude.nil?
      return false if @longitude.nil?
      return false if @title.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          id == o.id &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          title == o.title &&
          horizontal_accuracy == o.horizontal_accuracy &&
          live_period == o.live_period &&
          heading == o.heading &&
          proximity_alert_radius == o.proximity_alert_radius &&
          reply_markup == o.reply_markup &&
          input_message_content == o.input_message_content &&
          thumbnail_url == o.thumbnail_url &&
          thumbnail_width == o.thumbnail_width &&
          thumbnail_height == o.thumbnail_height
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, id, latitude, longitude, title, horizontal_accuracy, live_period, heading, proximity_alert_radius, reply_markup, input_message_content, thumbnail_url, thumbnail_width, thumbnail_height].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TelegramBotOpenapi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
