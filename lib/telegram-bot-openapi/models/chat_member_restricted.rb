=begin
#telegram-bot-api

#Unofficial telegram-bot-api OpenAPI spec. Generated from the Bot API docs at https://core.telegram.org/bots/api

The version of the OpenAPI document: Bot API 7.2

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module TelegramBotOpenapi
  # Represents a chat member that is under certain restrictions in the chat. Supergroups only.
  class ChatMemberRestricted
    # The member's status in the chat, always \"restricted\"
    attr_accessor :status

    # Information about the user
    attr_accessor :user

    # True, if the user is a member of the chat at the moment of the request
    attr_accessor :is_member

    # True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
    attr_accessor :can_send_messages

    # True, if the user is allowed to send audios
    attr_accessor :can_send_audios

    # True, if the user is allowed to send documents
    attr_accessor :can_send_documents

    # True, if the user is allowed to send photos
    attr_accessor :can_send_photos

    # True, if the user is allowed to send videos
    attr_accessor :can_send_videos

    # True, if the user is allowed to send video notes
    attr_accessor :can_send_video_notes

    # True, if the user is allowed to send voice notes
    attr_accessor :can_send_voice_notes

    # True, if the user is allowed to send polls
    attr_accessor :can_send_polls

    # True, if the user is allowed to send animations, games, stickers and use inline bots
    attr_accessor :can_send_other_messages

    # True, if the user is allowed to add web page previews to their messages
    attr_accessor :can_add_web_page_previews

    # True, if the user is allowed to change the chat title, photo and other settings
    attr_accessor :can_change_info

    # True, if the user is allowed to invite new users to the chat
    attr_accessor :can_invite_users

    # True, if the user is allowed to pin messages
    attr_accessor :can_pin_messages

    # True, if the user is allowed to create forum topics
    attr_accessor :can_manage_topics

    # Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever
    attr_accessor :until_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'user' => :'user',
        :'is_member' => :'is_member',
        :'can_send_messages' => :'can_send_messages',
        :'can_send_audios' => :'can_send_audios',
        :'can_send_documents' => :'can_send_documents',
        :'can_send_photos' => :'can_send_photos',
        :'can_send_videos' => :'can_send_videos',
        :'can_send_video_notes' => :'can_send_video_notes',
        :'can_send_voice_notes' => :'can_send_voice_notes',
        :'can_send_polls' => :'can_send_polls',
        :'can_send_other_messages' => :'can_send_other_messages',
        :'can_add_web_page_previews' => :'can_add_web_page_previews',
        :'can_change_info' => :'can_change_info',
        :'can_invite_users' => :'can_invite_users',
        :'can_pin_messages' => :'can_pin_messages',
        :'can_manage_topics' => :'can_manage_topics',
        :'until_date' => :'until_date'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'user' => :'User',
        :'is_member' => :'Boolean',
        :'can_send_messages' => :'Boolean',
        :'can_send_audios' => :'Boolean',
        :'can_send_documents' => :'Boolean',
        :'can_send_photos' => :'Boolean',
        :'can_send_videos' => :'Boolean',
        :'can_send_video_notes' => :'Boolean',
        :'can_send_voice_notes' => :'Boolean',
        :'can_send_polls' => :'Boolean',
        :'can_send_other_messages' => :'Boolean',
        :'can_add_web_page_previews' => :'Boolean',
        :'can_change_info' => :'Boolean',
        :'can_invite_users' => :'Boolean',
        :'can_pin_messages' => :'Boolean',
        :'can_manage_topics' => :'Boolean',
        :'until_date' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TelegramBotOpenapi::ChatMemberRestricted` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TelegramBotOpenapi::ChatMemberRestricted`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      else
        self.user = nil
      end

      if attributes.key?(:'is_member')
        self.is_member = attributes[:'is_member']
      else
        self.is_member = nil
      end

      if attributes.key?(:'can_send_messages')
        self.can_send_messages = attributes[:'can_send_messages']
      else
        self.can_send_messages = nil
      end

      if attributes.key?(:'can_send_audios')
        self.can_send_audios = attributes[:'can_send_audios']
      else
        self.can_send_audios = nil
      end

      if attributes.key?(:'can_send_documents')
        self.can_send_documents = attributes[:'can_send_documents']
      else
        self.can_send_documents = nil
      end

      if attributes.key?(:'can_send_photos')
        self.can_send_photos = attributes[:'can_send_photos']
      else
        self.can_send_photos = nil
      end

      if attributes.key?(:'can_send_videos')
        self.can_send_videos = attributes[:'can_send_videos']
      else
        self.can_send_videos = nil
      end

      if attributes.key?(:'can_send_video_notes')
        self.can_send_video_notes = attributes[:'can_send_video_notes']
      else
        self.can_send_video_notes = nil
      end

      if attributes.key?(:'can_send_voice_notes')
        self.can_send_voice_notes = attributes[:'can_send_voice_notes']
      else
        self.can_send_voice_notes = nil
      end

      if attributes.key?(:'can_send_polls')
        self.can_send_polls = attributes[:'can_send_polls']
      else
        self.can_send_polls = nil
      end

      if attributes.key?(:'can_send_other_messages')
        self.can_send_other_messages = attributes[:'can_send_other_messages']
      else
        self.can_send_other_messages = nil
      end

      if attributes.key?(:'can_add_web_page_previews')
        self.can_add_web_page_previews = attributes[:'can_add_web_page_previews']
      else
        self.can_add_web_page_previews = nil
      end

      if attributes.key?(:'can_change_info')
        self.can_change_info = attributes[:'can_change_info']
      else
        self.can_change_info = nil
      end

      if attributes.key?(:'can_invite_users')
        self.can_invite_users = attributes[:'can_invite_users']
      else
        self.can_invite_users = nil
      end

      if attributes.key?(:'can_pin_messages')
        self.can_pin_messages = attributes[:'can_pin_messages']
      else
        self.can_pin_messages = nil
      end

      if attributes.key?(:'can_manage_topics')
        self.can_manage_topics = attributes[:'can_manage_topics']
      else
        self.can_manage_topics = nil
      end

      if attributes.key?(:'until_date')
        self.until_date = attributes[:'until_date']
      else
        self.until_date = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @user.nil?
        invalid_properties.push('invalid value for "user", user cannot be nil.')
      end

      if @is_member.nil?
        invalid_properties.push('invalid value for "is_member", is_member cannot be nil.')
      end

      if @can_send_messages.nil?
        invalid_properties.push('invalid value for "can_send_messages", can_send_messages cannot be nil.')
      end

      if @can_send_audios.nil?
        invalid_properties.push('invalid value for "can_send_audios", can_send_audios cannot be nil.')
      end

      if @can_send_documents.nil?
        invalid_properties.push('invalid value for "can_send_documents", can_send_documents cannot be nil.')
      end

      if @can_send_photos.nil?
        invalid_properties.push('invalid value for "can_send_photos", can_send_photos cannot be nil.')
      end

      if @can_send_videos.nil?
        invalid_properties.push('invalid value for "can_send_videos", can_send_videos cannot be nil.')
      end

      if @can_send_video_notes.nil?
        invalid_properties.push('invalid value for "can_send_video_notes", can_send_video_notes cannot be nil.')
      end

      if @can_send_voice_notes.nil?
        invalid_properties.push('invalid value for "can_send_voice_notes", can_send_voice_notes cannot be nil.')
      end

      if @can_send_polls.nil?
        invalid_properties.push('invalid value for "can_send_polls", can_send_polls cannot be nil.')
      end

      if @can_send_other_messages.nil?
        invalid_properties.push('invalid value for "can_send_other_messages", can_send_other_messages cannot be nil.')
      end

      if @can_add_web_page_previews.nil?
        invalid_properties.push('invalid value for "can_add_web_page_previews", can_add_web_page_previews cannot be nil.')
      end

      if @can_change_info.nil?
        invalid_properties.push('invalid value for "can_change_info", can_change_info cannot be nil.')
      end

      if @can_invite_users.nil?
        invalid_properties.push('invalid value for "can_invite_users", can_invite_users cannot be nil.')
      end

      if @can_pin_messages.nil?
        invalid_properties.push('invalid value for "can_pin_messages", can_pin_messages cannot be nil.')
      end

      if @can_manage_topics.nil?
        invalid_properties.push('invalid value for "can_manage_topics", can_manage_topics cannot be nil.')
      end

      if @until_date.nil?
        invalid_properties.push('invalid value for "until_date", until_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @status.nil?
      return false if @user.nil?
      return false if @is_member.nil?
      return false if @can_send_messages.nil?
      return false if @can_send_audios.nil?
      return false if @can_send_documents.nil?
      return false if @can_send_photos.nil?
      return false if @can_send_videos.nil?
      return false if @can_send_video_notes.nil?
      return false if @can_send_voice_notes.nil?
      return false if @can_send_polls.nil?
      return false if @can_send_other_messages.nil?
      return false if @can_add_web_page_previews.nil?
      return false if @can_change_info.nil?
      return false if @can_invite_users.nil?
      return false if @can_pin_messages.nil?
      return false if @can_manage_topics.nil?
      return false if @until_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          user == o.user &&
          is_member == o.is_member &&
          can_send_messages == o.can_send_messages &&
          can_send_audios == o.can_send_audios &&
          can_send_documents == o.can_send_documents &&
          can_send_photos == o.can_send_photos &&
          can_send_videos == o.can_send_videos &&
          can_send_video_notes == o.can_send_video_notes &&
          can_send_voice_notes == o.can_send_voice_notes &&
          can_send_polls == o.can_send_polls &&
          can_send_other_messages == o.can_send_other_messages &&
          can_add_web_page_previews == o.can_add_web_page_previews &&
          can_change_info == o.can_change_info &&
          can_invite_users == o.can_invite_users &&
          can_pin_messages == o.can_pin_messages &&
          can_manage_topics == o.can_manage_topics &&
          until_date == o.until_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, user, is_member, can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, can_send_voice_notes, can_send_polls, can_send_other_messages, can_add_web_page_previews, can_change_info, can_invite_users, can_pin_messages, can_manage_topics, until_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TelegramBotOpenapi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
