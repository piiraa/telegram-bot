=begin
#telegram-bot-api

#Unofficial telegram-bot-api OpenAPI spec. Generated from the Bot API docs at https://core.telegram.org/bots/api

The version of the OpenAPI document: Bot API 7.2

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module TelegramBotOpenapi
  # This object represents a chat.
  class Chat
    # Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    attr_accessor :id

    # Type of chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\"
    attr_accessor :type

    # Optional. Title, for supergroups, channels and group chats
    attr_accessor :title

    # Optional. Username, for private chats, supergroups and channels if available
    attr_accessor :username

    # Optional. First name of the other party in a private chat
    attr_accessor :first_name

    # Optional. Last name of the other party in a private chat
    attr_accessor :last_name

    # Optional. True, if the supergroup chat is a forum (has topics enabled)
    attr_accessor :is_forum

    # Optional. Chat photo. Returned only in getChat.
    attr_accessor :photo

    # Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels. Returned only in getChat.
    attr_accessor :active_usernames

    # Optional. For private chats, the date of birth of the user. Returned only in getChat.
    attr_accessor :birthdate

    # Optional. For private chats with business accounts, the intro of the business. Returned only in getChat.
    attr_accessor :business_intro

    # Optional. For private chats with business accounts, the location of the business. Returned only in getChat.
    attr_accessor :business_location

    # Optional. For private chats with business accounts, the opening hours of the business. Returned only in getChat.
    attr_accessor :business_opening_hours

    # Optional. For private chats, the personal channel of the user. Returned only in getChat.
    attr_accessor :personal_chat

    # Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed. Returned only in getChat.
    attr_accessor :available_reactions

    # Optional. Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details. Returned only in getChat. Always returned in getChat.
    attr_accessor :accent_color_id

    # Optional. Custom emoji identifier of emoji chosen by the chat for the reply header and link preview background. Returned only in getChat.
    attr_accessor :background_custom_emoji_id

    # Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details. Returned only in getChat.
    attr_accessor :profile_accent_color_id

    # Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background. Returned only in getChat.
    attr_accessor :profile_background_custom_emoji_id

    # Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat. Returned only in getChat.
    attr_accessor :emoji_status_custom_emoji_id

    # Optional. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any. Returned only in getChat.
    attr_accessor :emoji_status_expiration_date

    # Optional. Bio of the other party in a private chat. Returned only in getChat.
    attr_accessor :bio

    # Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user. Returned only in getChat.
    attr_accessor :has_private_forwards

    # Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat. Returned only in getChat.
    attr_accessor :has_restricted_voice_and_video_messages

    # Optional. True, if users need to join the supergroup before they can send messages. Returned only in getChat.
    attr_accessor :join_to_send_messages

    # Optional. True, if all users directly joining the supergroup need to be approved by supergroup administrators. Returned only in getChat.
    attr_accessor :join_by_request

    # Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.
    attr_accessor :description

    # Optional. Primary invite link, for groups, supergroups and channel chats. Returned only in getChat.
    attr_accessor :invite_link

    # Optional. The most recent pinned message (by sending date). Returned only in getChat.
    attr_accessor :pinned_message

    # Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.
    attr_accessor :permissions

    # Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds. Returned only in getChat.
    attr_accessor :slow_mode_delay

    # Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions. Returned only in getChat.
    attr_accessor :unrestrict_boost_count

    # Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds. Returned only in getChat.
    attr_accessor :message_auto_delete_time

    # Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators. Returned only in getChat.
    attr_accessor :has_aggressive_anti_spam_enabled

    # Optional. True, if non-administrators can only get the list of bots and administrators in the chat. Returned only in getChat.
    attr_accessor :has_hidden_members

    # Optional. True, if messages from the chat can't be forwarded to other chats. Returned only in getChat.
    attr_accessor :has_protected_content

    # Optional. True, if new chat members will have access to old messages; available only to chat administrators. Returned only in getChat.
    attr_accessor :has_visible_history

    # Optional. For supergroups, name of group sticker set. Returned only in getChat.
    attr_accessor :sticker_set_name

    # Optional. True, if the bot can change the group sticker set. Returned only in getChat.
    attr_accessor :can_set_sticker_set

    # Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group. Returned only in getChat.
    attr_accessor :custom_emoji_sticker_set_name

    # Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in getChat.
    attr_accessor :linked_chat_id

    # Optional. For supergroups, the location to which the supergroup is connected. Returned only in getChat.
    attr_accessor :location

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'title' => :'title',
        :'username' => :'username',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'is_forum' => :'is_forum',
        :'photo' => :'photo',
        :'active_usernames' => :'active_usernames',
        :'birthdate' => :'birthdate',
        :'business_intro' => :'business_intro',
        :'business_location' => :'business_location',
        :'business_opening_hours' => :'business_opening_hours',
        :'personal_chat' => :'personal_chat',
        :'available_reactions' => :'available_reactions',
        :'accent_color_id' => :'accent_color_id',
        :'background_custom_emoji_id' => :'background_custom_emoji_id',
        :'profile_accent_color_id' => :'profile_accent_color_id',
        :'profile_background_custom_emoji_id' => :'profile_background_custom_emoji_id',
        :'emoji_status_custom_emoji_id' => :'emoji_status_custom_emoji_id',
        :'emoji_status_expiration_date' => :'emoji_status_expiration_date',
        :'bio' => :'bio',
        :'has_private_forwards' => :'has_private_forwards',
        :'has_restricted_voice_and_video_messages' => :'has_restricted_voice_and_video_messages',
        :'join_to_send_messages' => :'join_to_send_messages',
        :'join_by_request' => :'join_by_request',
        :'description' => :'description',
        :'invite_link' => :'invite_link',
        :'pinned_message' => :'pinned_message',
        :'permissions' => :'permissions',
        :'slow_mode_delay' => :'slow_mode_delay',
        :'unrestrict_boost_count' => :'unrestrict_boost_count',
        :'message_auto_delete_time' => :'message_auto_delete_time',
        :'has_aggressive_anti_spam_enabled' => :'has_aggressive_anti_spam_enabled',
        :'has_hidden_members' => :'has_hidden_members',
        :'has_protected_content' => :'has_protected_content',
        :'has_visible_history' => :'has_visible_history',
        :'sticker_set_name' => :'sticker_set_name',
        :'can_set_sticker_set' => :'can_set_sticker_set',
        :'custom_emoji_sticker_set_name' => :'custom_emoji_sticker_set_name',
        :'linked_chat_id' => :'linked_chat_id',
        :'location' => :'location'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'type' => :'String',
        :'title' => :'String',
        :'username' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'is_forum' => :'Boolean',
        :'photo' => :'ChatPhoto',
        :'active_usernames' => :'Array<String>',
        :'birthdate' => :'Birthdate',
        :'business_intro' => :'BusinessIntro',
        :'business_location' => :'BusinessLocation',
        :'business_opening_hours' => :'BusinessOpeningHours',
        :'personal_chat' => :'Chat',
        :'available_reactions' => :'Array<Object>',
        :'accent_color_id' => :'Integer',
        :'background_custom_emoji_id' => :'String',
        :'profile_accent_color_id' => :'Integer',
        :'profile_background_custom_emoji_id' => :'String',
        :'emoji_status_custom_emoji_id' => :'String',
        :'emoji_status_expiration_date' => :'Integer',
        :'bio' => :'String',
        :'has_private_forwards' => :'Boolean',
        :'has_restricted_voice_and_video_messages' => :'Boolean',
        :'join_to_send_messages' => :'Boolean',
        :'join_by_request' => :'Boolean',
        :'description' => :'String',
        :'invite_link' => :'String',
        :'pinned_message' => :'Message',
        :'permissions' => :'ChatPermissions',
        :'slow_mode_delay' => :'Integer',
        :'unrestrict_boost_count' => :'Integer',
        :'message_auto_delete_time' => :'Integer',
        :'has_aggressive_anti_spam_enabled' => :'Boolean',
        :'has_hidden_members' => :'Boolean',
        :'has_protected_content' => :'Boolean',
        :'has_visible_history' => :'Boolean',
        :'sticker_set_name' => :'String',
        :'can_set_sticker_set' => :'Boolean',
        :'custom_emoji_sticker_set_name' => :'String',
        :'linked_chat_id' => :'Integer',
        :'location' => :'ChatLocation'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TelegramBotOpenapi::Chat` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TelegramBotOpenapi::Chat`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'is_forum')
        self.is_forum = attributes[:'is_forum']
      end

      if attributes.key?(:'photo')
        self.photo = attributes[:'photo']
      end

      if attributes.key?(:'active_usernames')
        if (value = attributes[:'active_usernames']).is_a?(Array)
          self.active_usernames = value
        end
      end

      if attributes.key?(:'birthdate')
        self.birthdate = attributes[:'birthdate']
      end

      if attributes.key?(:'business_intro')
        self.business_intro = attributes[:'business_intro']
      end

      if attributes.key?(:'business_location')
        self.business_location = attributes[:'business_location']
      end

      if attributes.key?(:'business_opening_hours')
        self.business_opening_hours = attributes[:'business_opening_hours']
      end

      if attributes.key?(:'personal_chat')
        self.personal_chat = attributes[:'personal_chat']
      end

      if attributes.key?(:'available_reactions')
        if (value = attributes[:'available_reactions']).is_a?(Array)
          self.available_reactions = value
        end
      end

      if attributes.key?(:'accent_color_id')
        self.accent_color_id = attributes[:'accent_color_id']
      end

      if attributes.key?(:'background_custom_emoji_id')
        self.background_custom_emoji_id = attributes[:'background_custom_emoji_id']
      end

      if attributes.key?(:'profile_accent_color_id')
        self.profile_accent_color_id = attributes[:'profile_accent_color_id']
      end

      if attributes.key?(:'profile_background_custom_emoji_id')
        self.profile_background_custom_emoji_id = attributes[:'profile_background_custom_emoji_id']
      end

      if attributes.key?(:'emoji_status_custom_emoji_id')
        self.emoji_status_custom_emoji_id = attributes[:'emoji_status_custom_emoji_id']
      end

      if attributes.key?(:'emoji_status_expiration_date')
        self.emoji_status_expiration_date = attributes[:'emoji_status_expiration_date']
      end

      if attributes.key?(:'bio')
        self.bio = attributes[:'bio']
      end

      if attributes.key?(:'has_private_forwards')
        self.has_private_forwards = attributes[:'has_private_forwards']
      end

      if attributes.key?(:'has_restricted_voice_and_video_messages')
        self.has_restricted_voice_and_video_messages = attributes[:'has_restricted_voice_and_video_messages']
      end

      if attributes.key?(:'join_to_send_messages')
        self.join_to_send_messages = attributes[:'join_to_send_messages']
      end

      if attributes.key?(:'join_by_request')
        self.join_by_request = attributes[:'join_by_request']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'invite_link')
        self.invite_link = attributes[:'invite_link']
      end

      if attributes.key?(:'pinned_message')
        self.pinned_message = attributes[:'pinned_message']
      end

      if attributes.key?(:'permissions')
        self.permissions = attributes[:'permissions']
      end

      if attributes.key?(:'slow_mode_delay')
        self.slow_mode_delay = attributes[:'slow_mode_delay']
      end

      if attributes.key?(:'unrestrict_boost_count')
        self.unrestrict_boost_count = attributes[:'unrestrict_boost_count']
      end

      if attributes.key?(:'message_auto_delete_time')
        self.message_auto_delete_time = attributes[:'message_auto_delete_time']
      end

      if attributes.key?(:'has_aggressive_anti_spam_enabled')
        self.has_aggressive_anti_spam_enabled = attributes[:'has_aggressive_anti_spam_enabled']
      end

      if attributes.key?(:'has_hidden_members')
        self.has_hidden_members = attributes[:'has_hidden_members']
      end

      if attributes.key?(:'has_protected_content')
        self.has_protected_content = attributes[:'has_protected_content']
      end

      if attributes.key?(:'has_visible_history')
        self.has_visible_history = attributes[:'has_visible_history']
      end

      if attributes.key?(:'sticker_set_name')
        self.sticker_set_name = attributes[:'sticker_set_name']
      end

      if attributes.key?(:'can_set_sticker_set')
        self.can_set_sticker_set = attributes[:'can_set_sticker_set']
      end

      if attributes.key?(:'custom_emoji_sticker_set_name')
        self.custom_emoji_sticker_set_name = attributes[:'custom_emoji_sticker_set_name']
      end

      if attributes.key?(:'linked_chat_id')
        self.linked_chat_id = attributes[:'linked_chat_id']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          title == o.title &&
          username == o.username &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          is_forum == o.is_forum &&
          photo == o.photo &&
          active_usernames == o.active_usernames &&
          birthdate == o.birthdate &&
          business_intro == o.business_intro &&
          business_location == o.business_location &&
          business_opening_hours == o.business_opening_hours &&
          personal_chat == o.personal_chat &&
          available_reactions == o.available_reactions &&
          accent_color_id == o.accent_color_id &&
          background_custom_emoji_id == o.background_custom_emoji_id &&
          profile_accent_color_id == o.profile_accent_color_id &&
          profile_background_custom_emoji_id == o.profile_background_custom_emoji_id &&
          emoji_status_custom_emoji_id == o.emoji_status_custom_emoji_id &&
          emoji_status_expiration_date == o.emoji_status_expiration_date &&
          bio == o.bio &&
          has_private_forwards == o.has_private_forwards &&
          has_restricted_voice_and_video_messages == o.has_restricted_voice_and_video_messages &&
          join_to_send_messages == o.join_to_send_messages &&
          join_by_request == o.join_by_request &&
          description == o.description &&
          invite_link == o.invite_link &&
          pinned_message == o.pinned_message &&
          permissions == o.permissions &&
          slow_mode_delay == o.slow_mode_delay &&
          unrestrict_boost_count == o.unrestrict_boost_count &&
          message_auto_delete_time == o.message_auto_delete_time &&
          has_aggressive_anti_spam_enabled == o.has_aggressive_anti_spam_enabled &&
          has_hidden_members == o.has_hidden_members &&
          has_protected_content == o.has_protected_content &&
          has_visible_history == o.has_visible_history &&
          sticker_set_name == o.sticker_set_name &&
          can_set_sticker_set == o.can_set_sticker_set &&
          custom_emoji_sticker_set_name == o.custom_emoji_sticker_set_name &&
          linked_chat_id == o.linked_chat_id &&
          location == o.location
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, title, username, first_name, last_name, is_forum, photo, active_usernames, birthdate, business_intro, business_location, business_opening_hours, personal_chat, available_reactions, accent_color_id, background_custom_emoji_id, profile_accent_color_id, profile_background_custom_emoji_id, emoji_status_custom_emoji_id, emoji_status_expiration_date, bio, has_private_forwards, has_restricted_voice_and_video_messages, join_to_send_messages, join_by_request, description, invite_link, pinned_message, permissions, slow_mode_delay, unrestrict_boost_count, message_auto_delete_time, has_aggressive_anti_spam_enabled, has_hidden_members, has_protected_content, has_visible_history, sticker_set_name, can_set_sticker_set, custom_emoji_sticker_set_name, linked_chat_id, location].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TelegramBotOpenapi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
