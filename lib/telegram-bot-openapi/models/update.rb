=begin
#telegram-bot-api

#Unofficial telegram-bot-api OpenAPI spec. Generated from the Bot API docs at https://core.telegram.org/bots/api

The version of the OpenAPI document: Bot API 7.2

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module TelegramBotOpenapi
  # This object represents an incoming update. At most one of the optional parameters can be present in any given update.
  class Update
    # The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
    attr_accessor :update_id

    # Optional. New incoming message of any kind - text, photo, sticker, etc.
    attr_accessor :message

    # Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.
    attr_accessor :edited_message

    # Optional. New incoming channel post of any kind - text, photo, sticker, etc.
    attr_accessor :channel_post

    # Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.
    attr_accessor :edited_channel_post

    # Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot
    attr_accessor :business_connection

    # Optional. New non-service message from a connected business account
    attr_accessor :business_message

    # Optional. New version of a message from a connected business account
    attr_accessor :edited_business_message

    # Optional. Messages were deleted from a connected business account
    attr_accessor :deleted_business_messages

    # Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots.
    attr_accessor :message_reaction

    # Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.
    attr_accessor :message_reaction_count

    # Optional. New incoming inline query
    attr_accessor :inline_query

    # Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
    attr_accessor :chosen_inline_result

    # Optional. New incoming callback query
    attr_accessor :callback_query

    # Optional. New incoming shipping query. Only for invoices with flexible price
    attr_accessor :shipping_query

    # Optional. New incoming pre-checkout query. Contains full information about checkout
    attr_accessor :pre_checkout_query

    # Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot
    attr_accessor :poll

    # Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
    attr_accessor :poll_answer

    # Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.
    attr_accessor :my_chat_member

    # Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates.
    attr_accessor :chat_member

    # Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates.
    attr_accessor :chat_join_request

    # Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.
    attr_accessor :chat_boost

    # Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.
    attr_accessor :removed_chat_boost

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'update_id' => :'update_id',
        :'message' => :'message',
        :'edited_message' => :'edited_message',
        :'channel_post' => :'channel_post',
        :'edited_channel_post' => :'edited_channel_post',
        :'business_connection' => :'business_connection',
        :'business_message' => :'business_message',
        :'edited_business_message' => :'edited_business_message',
        :'deleted_business_messages' => :'deleted_business_messages',
        :'message_reaction' => :'message_reaction',
        :'message_reaction_count' => :'message_reaction_count',
        :'inline_query' => :'inline_query',
        :'chosen_inline_result' => :'chosen_inline_result',
        :'callback_query' => :'callback_query',
        :'shipping_query' => :'shipping_query',
        :'pre_checkout_query' => :'pre_checkout_query',
        :'poll' => :'poll',
        :'poll_answer' => :'poll_answer',
        :'my_chat_member' => :'my_chat_member',
        :'chat_member' => :'chat_member',
        :'chat_join_request' => :'chat_join_request',
        :'chat_boost' => :'chat_boost',
        :'removed_chat_boost' => :'removed_chat_boost'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'update_id' => :'Integer',
        :'message' => :'Message',
        :'edited_message' => :'Message',
        :'channel_post' => :'Message',
        :'edited_channel_post' => :'Message',
        :'business_connection' => :'BusinessConnection',
        :'business_message' => :'Message',
        :'edited_business_message' => :'Message',
        :'deleted_business_messages' => :'BusinessMessagesDeleted',
        :'message_reaction' => :'MessageReactionUpdated',
        :'message_reaction_count' => :'MessageReactionCountUpdated',
        :'inline_query' => :'InlineQuery',
        :'chosen_inline_result' => :'ChosenInlineResult',
        :'callback_query' => :'CallbackQuery',
        :'shipping_query' => :'ShippingQuery',
        :'pre_checkout_query' => :'PreCheckoutQuery',
        :'poll' => :'Poll',
        :'poll_answer' => :'PollAnswer',
        :'my_chat_member' => :'ChatMemberUpdated',
        :'chat_member' => :'ChatMemberUpdated',
        :'chat_join_request' => :'ChatJoinRequest',
        :'chat_boost' => :'ChatBoostUpdated',
        :'removed_chat_boost' => :'ChatBoostRemoved'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TelegramBotOpenapi::Update` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TelegramBotOpenapi::Update`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'update_id')
        self.update_id = attributes[:'update_id']
      else
        self.update_id = nil
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'edited_message')
        self.edited_message = attributes[:'edited_message']
      end

      if attributes.key?(:'channel_post')
        self.channel_post = attributes[:'channel_post']
      end

      if attributes.key?(:'edited_channel_post')
        self.edited_channel_post = attributes[:'edited_channel_post']
      end

      if attributes.key?(:'business_connection')
        self.business_connection = attributes[:'business_connection']
      end

      if attributes.key?(:'business_message')
        self.business_message = attributes[:'business_message']
      end

      if attributes.key?(:'edited_business_message')
        self.edited_business_message = attributes[:'edited_business_message']
      end

      if attributes.key?(:'deleted_business_messages')
        self.deleted_business_messages = attributes[:'deleted_business_messages']
      end

      if attributes.key?(:'message_reaction')
        self.message_reaction = attributes[:'message_reaction']
      end

      if attributes.key?(:'message_reaction_count')
        self.message_reaction_count = attributes[:'message_reaction_count']
      end

      if attributes.key?(:'inline_query')
        self.inline_query = attributes[:'inline_query']
      end

      if attributes.key?(:'chosen_inline_result')
        self.chosen_inline_result = attributes[:'chosen_inline_result']
      end

      if attributes.key?(:'callback_query')
        self.callback_query = attributes[:'callback_query']
      end

      if attributes.key?(:'shipping_query')
        self.shipping_query = attributes[:'shipping_query']
      end

      if attributes.key?(:'pre_checkout_query')
        self.pre_checkout_query = attributes[:'pre_checkout_query']
      end

      if attributes.key?(:'poll')
        self.poll = attributes[:'poll']
      end

      if attributes.key?(:'poll_answer')
        self.poll_answer = attributes[:'poll_answer']
      end

      if attributes.key?(:'my_chat_member')
        self.my_chat_member = attributes[:'my_chat_member']
      end

      if attributes.key?(:'chat_member')
        self.chat_member = attributes[:'chat_member']
      end

      if attributes.key?(:'chat_join_request')
        self.chat_join_request = attributes[:'chat_join_request']
      end

      if attributes.key?(:'chat_boost')
        self.chat_boost = attributes[:'chat_boost']
      end

      if attributes.key?(:'removed_chat_boost')
        self.removed_chat_boost = attributes[:'removed_chat_boost']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @update_id.nil?
        invalid_properties.push('invalid value for "update_id", update_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @update_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          update_id == o.update_id &&
          message == o.message &&
          edited_message == o.edited_message &&
          channel_post == o.channel_post &&
          edited_channel_post == o.edited_channel_post &&
          business_connection == o.business_connection &&
          business_message == o.business_message &&
          edited_business_message == o.edited_business_message &&
          deleted_business_messages == o.deleted_business_messages &&
          message_reaction == o.message_reaction &&
          message_reaction_count == o.message_reaction_count &&
          inline_query == o.inline_query &&
          chosen_inline_result == o.chosen_inline_result &&
          callback_query == o.callback_query &&
          shipping_query == o.shipping_query &&
          pre_checkout_query == o.pre_checkout_query &&
          poll == o.poll &&
          poll_answer == o.poll_answer &&
          my_chat_member == o.my_chat_member &&
          chat_member == o.chat_member &&
          chat_join_request == o.chat_join_request &&
          chat_boost == o.chat_boost &&
          removed_chat_boost == o.removed_chat_boost
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [update_id, message, edited_message, channel_post, edited_channel_post, business_connection, business_message, edited_business_message, deleted_business_messages, message_reaction, message_reaction_count, inline_query, chosen_inline_result, callback_query, shipping_query, pre_checkout_query, poll, poll_answer, my_chat_member, chat_member, chat_join_request, chat_boost, removed_chat_boost].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TelegramBotOpenapi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
